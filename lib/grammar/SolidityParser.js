// Generated from ./Solidity.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var SolidityListener = require('./SolidityListener').SolidityListener;
var grammarFileName = "Solidity.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003|\u03b3\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0007\u0002\u00ac\n\u0002\f\u0002\u000e\u0002\u00af",
    "\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u00bc\n\u0005\u0003\u0006\u0003\u0006\u0005\u0006\u00c0",
    "\n\u0006\u0003\u0007\u0003\u0007\u0003\b\u0005\b\u00c5\n\b\u0003\b\u0003",
    "\b\u0003\t\u0003\t\u0003\t\u0005\t\u00cc\n\t\u0003\n\u0003\n\u0003\n",
    "\u0003\n\u0005\n\u00d2\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u00d8",
    "\n\n\u0003\n\u0003\n\u0005\n\u00dc\n\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u00e6\n\n\f\n\u000e\n\u00e9",
    "\u000b\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u00f0\n\n\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007",
    "\u000b\u00f8\n\u000b\f\u000b\u000e\u000b\u00fb\u000b\u000b\u0005\u000b",
    "\u00fd\n\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0101\n\u000b\f\u000b",
    "\u000e\u000b\u0104\u000b\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0007\f\u010d\n\f\f\f\u000e\f\u0110\u000b",
    "\f\u0003\f\u0003\f\u0005\f\u0114\n\f\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u011e\n\r\u0003\u000e\u0003",
    "\u000e\u0007\u000e\u0122\n\u000e\f\u000e\u000e\u000e\u0125\u000b\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u012a\n\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0005\u000f\u0133\n\u000f\u0003\u000f\u0003\u000f\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u013c\n",
    "\u0010\f\u0010\u000e\u0010\u013f\u000b\u0010\u0005\u0010\u0141\n\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u014b\n\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0152\n\u0013",
    "\u0003\u0013\u0005\u0013\u0155\n\u0013\u0003\u0014\u0003\u0014\u0005",
    "\u0014\u0159\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014",
    "\u015e\n\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0162\n\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005",
    "\u0017\u0170\n\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u017a\n",
    "\u0019\u0003\u0019\u0003\u0019\u0007\u0019\u017e\n\u0019\f\u0019\u000e",
    "\u0019\u0181\u000b\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u018b\n",
    "\u001a\f\u001a\u000e\u001a\u018e\u000b\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u0196\n",
    "\u001c\f\u001c\u000e\u001c\u0199\u000b\u001c\u0005\u001c\u019b\n\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d",
    "\u01a2\n\u001d\f\u001d\u000e\u001d\u01a5\u000b\u001d\u0003\u001d\u0005",
    "\u001d\u01a8\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0007\u001e\u01ae\n\u001e\f\u001e\u000e\u001e\u01b1\u000b\u001e\u0005",
    "\u001e\u01b3\n\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f",
    "\u0005\u001f\u01b9\n\u001f\u0003\u001f\u0005\u001f\u01bc\n\u001f\u0003",
    " \u0003 \u0003 \u0003 \u0007 \u01c2\n \f \u000e \u01c5\u000b \u0005",
    " \u01c7\n \u0003 \u0003 \u0003!\u0003!\u0005!\u01cd\n!\u0003\"\u0003",
    "\"\u0005\"\u01d1\n\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0005#\u01da\n#\u0003#\u0003#\u0003#\u0005#\u01df\n#\u0003#\u0007",
    "#\u01e2\n#\f#\u000e#\u01e5\u000b#\u0003$\u0003$\u0003$\u0007$\u01ea",
    "\n$\f$\u000e$\u01ed\u000b$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0007&\u01fb\n&\f&\u000e",
    "&\u01fe\u000b&\u0003&\u0003&\u0005&\u0202\n&\u0003\'\u0003\'\u0003(",
    "\u0003(\u0003)\u0003)\u0007)\u020a\n)\f)\u000e)\u020d\u000b)\u0003)",
    "\u0003)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0005*\u021d\n*\u0003+\u0003+\u0003+\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u0229\n,\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003.\u0003.\u0005.\u0233\n.\u0003/\u0003/\u0003",
    "/\u0003/\u0005/\u0239\n/\u0003/\u0005/\u023c\n/\u0003/\u0003/\u0005",
    "/\u0240\n/\u0003/\u0003/\u0003/\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00031\u00031\u00031\u00032\u00032\u00032\u00033\u0003",
    "3\u00033\u00034\u00034\u00054\u0258\n4\u00034\u00034\u00035\u00035\u0003",
    "5\u00036\u00036\u00036\u00056\u0262\n6\u00036\u00036\u00056\u0266\n",
    "6\u00036\u00036\u00037\u00037\u00057\u026c\n7\u00037\u00077\u026f\n",
    "7\f7\u000e7\u0272\u000b7\u00037\u00057\u0275\n7\u00037\u00037\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00058\u0291\n8\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00078\u02cc\n8\f8\u000e8\u02cf\u000b8\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00059\u02d8\n9\u0003:\u0003:\u0003",
    ":\u0007:\u02dd\n:\f:\u000e:\u02e0\u000b:\u0003;\u0003;\u0003;\u0007",
    ";\u02e5\n;\f;\u000e;\u02e8\u000b;\u0003;\u0005;\u02eb\n;\u0003<\u0003",
    "<\u0003<\u0003<\u0003=\u0003=\u0005=\u02f3\n=\u0003=\u0003=\u0005=\u02f7",
    "\n=\u0005=\u02f9\n=\u0003>\u0003>\u0003>\u0003>\u0007>\u02ff\n>\f>\u000e",
    ">\u0302\u000b>\u0005>\u0304\n>\u0003>\u0003>\u0003>\u0003>\u0003>\u0007",
    ">\u030b\n>\f>\u000e>\u030e\u000b>\u0005>\u0310\n>\u0003>\u0005>\u0313",
    "\n>\u0003?\u0003?\u0003@\u0003@\u0005@\u0319\n@\u0003@\u0003@\u0003",
    "A\u0003A\u0007A\u031f\nA\fA\u000eA\u0322\u000bA\u0003A\u0003A\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0005",
    "B\u033a\nB\u0003C\u0003C\u0005C\u033e\nC\u0003D\u0003D\u0003D\u0003",
    "D\u0005D\u0344\nD\u0003D\u0003D\u0005D\u0348\nD\u0003D\u0003D\u0007",
    "D\u034c\nD\fD\u000eD\u034f\u000bD\u0003D\u0005D\u0352\nD\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0005G\u0362\nG\u0003H\u0003H\u0003H\u0007H\u0367\n",
    "H\fH\u000eH\u036a\u000bH\u0003I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003",
    "K\u0003K\u0003K\u0003K\u0005K\u0376\nK\u0003K\u0003K\u0003K\u0005K\u037b",
    "\nK\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003L\u0003M\u0003M\u0003",
    "M\u0005M\u0387\nM\u0003M\u0003M\u0003M\u0005M\u038c\nM\u0003M\u0003",
    "M\u0003N\u0003N\u0003N\u0007N\u0393\nN\fN\u000eN\u0396\u000bN\u0003",
    "N\u0003N\u0003N\u0005N\u039b\nN\u0003O\u0003O\u0003P\u0003P\u0003P\u0003",
    "P\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003S\u0003S\u0005S\u03af\nS\u0003T\u0003T\u0003T\u0002\u0004DnU",
    "\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c",
    "\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082",
    "\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a",
    "\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u0002\u0013\u0003\u0002\u0005\t",
    "\u0003\u0002\u0011\u0013\u0006\u0002ooqqssvv\u0005\u0002oprrww\u0003",
    "\u0002&\'\u0004\u0002(+bf\u0003\u000256\u0003\u00029:\u0003\u0002;<",
    "\u0004\u0002\f\f@A\u0003\u0002BC\u0004\u0002\u0005\u0006\b\t\u0003\u0002",
    "FG\u0004\u0002\u0017\u0017LU\u0004\u0002ikxx\u0003\u0002ij\u0004\u0002",
    "\r\ryy\u0002\u0409\u0002\u00ad\u0003\u0002\u0002\u0002\u0004\u00b2\u0003",
    "\u0002\u0002\u0002\u0006\u00b7\u0003\u0002\u0002\u0002\b\u00bb\u0003",
    "\u0002\u0002\u0002\n\u00bd\u0003\u0002\u0002\u0002\f\u00c1\u0003\u0002",
    "\u0002\u0002\u000e\u00c4\u0003\u0002\u0002\u0002\u0010\u00c8\u0003\u0002",
    "\u0002\u0002\u0012\u00ef\u0003\u0002\u0002\u0002\u0014\u00f1\u0003\u0002",
    "\u0002\u0002\u0016\u0107\u0003\u0002\u0002\u0002\u0018\u011d\u0003\u0002",
    "\u0002\u0002\u001a\u011f\u0003\u0002\u0002\u0002\u001c\u012d\u0003\u0002",
    "\u0002\u0002\u001e\u0136\u0003\u0002\u0002\u0002 \u0144\u0003\u0002",
    "\u0002\u0002\"\u0147\u0003\u0002\u0002\u0002$\u014e\u0003\u0002\u0002",
    "\u0002&\u0156\u0003\u0002\u0002\u0002(\u0163\u0003\u0002\u0002\u0002",
    "*\u0168\u0003\u0002\u0002\u0002,\u016b\u0003\u0002\u0002\u0002.\u0173",
    "\u0003\u0002\u0002\u00020\u0175\u0003\u0002\u0002\u00022\u018c\u0003",
    "\u0002\u0002\u00024\u018f\u0003\u0002\u0002\u00026\u0191\u0003\u0002",
    "\u0002\u00028\u019e\u0003\u0002\u0002\u0002:\u01a9\u0003\u0002\u0002",
    "\u0002<\u01b6\u0003\u0002\u0002\u0002>\u01bd\u0003\u0002\u0002\u0002",
    "@\u01ca\u0003\u0002\u0002\u0002B\u01ce\u0003\u0002\u0002\u0002D\u01d9",
    "\u0003\u0002\u0002\u0002F\u01e6\u0003\u0002\u0002\u0002H\u01ee\u0003",
    "\u0002\u0002\u0002J\u01f5\u0003\u0002\u0002\u0002L\u0203\u0003\u0002",
    "\u0002\u0002N\u0205\u0003\u0002\u0002\u0002P\u0207\u0003\u0002\u0002",
    "\u0002R\u021c\u0003\u0002\u0002\u0002T\u021e\u0003\u0002\u0002\u0002",
    "V\u0221\u0003\u0002\u0002\u0002X\u022a\u0003\u0002\u0002\u0002Z\u0232",
    "\u0003\u0002\u0002\u0002\\\u0234\u0003\u0002\u0002\u0002^\u0244\u0003",
    "\u0002\u0002\u0002`\u024c\u0003\u0002\u0002\u0002b\u024f\u0003\u0002",
    "\u0002\u0002d\u0252\u0003\u0002\u0002\u0002f\u0255\u0003\u0002\u0002",
    "\u0002h\u025b\u0003\u0002\u0002\u0002j\u0261\u0003\u0002\u0002\u0002",
    "l\u0269\u0003\u0002\u0002\u0002n\u0290\u0003\u0002\u0002\u0002p\u02d7",
    "\u0003\u0002\u0002\u0002r\u02d9\u0003\u0002\u0002\u0002t\u02e1\u0003",
    "\u0002\u0002\u0002v\u02ec\u0003\u0002\u0002\u0002x\u02f8\u0003\u0002",
    "\u0002\u0002z\u0312\u0003\u0002\u0002\u0002|\u0314\u0003\u0002\u0002",
    "\u0002~\u0316\u0003\u0002\u0002\u0002\u0080\u031c\u0003\u0002\u0002",
    "\u0002\u0082\u0339\u0003\u0002\u0002\u0002\u0084\u033d\u0003\u0002\u0002",
    "\u0002\u0086\u0343\u0003\u0002\u0002\u0002\u0088\u0353\u0003\u0002\u0002",
    "\u0002\u008a\u0358\u0003\u0002\u0002\u0002\u008c\u0361\u0003\u0002\u0002",
    "\u0002\u008e\u0363\u0003\u0002\u0002\u0002\u0090\u036b\u0003\u0002\u0002",
    "\u0002\u0092\u036e\u0003\u0002\u0002\u0002\u0094\u0371\u0003\u0002\u0002",
    "\u0002\u0096\u037e\u0003\u0002\u0002\u0002\u0098\u0383\u0003\u0002\u0002",
    "\u0002\u009a\u038f\u0003\u0002\u0002\u0002\u009c\u039c\u0003\u0002\u0002",
    "\u0002\u009e\u039e\u0003\u0002\u0002\u0002\u00a0\u03a2\u0003\u0002\u0002",
    "\u0002\u00a2\u03a7\u0003\u0002\u0002\u0002\u00a4\u03ac\u0003\u0002\u0002",
    "\u0002\u00a6\u03b0\u0003\u0002\u0002\u0002\u00a8\u00ac\u0005\u0004\u0003",
    "\u0002\u00a9\u00ac\u0005\u0012\n\u0002\u00aa\u00ac\u0005\u0014\u000b",
    "\u0002\u00ab\u00a8\u0003\u0002\u0002\u0002\u00ab\u00a9\u0003\u0002\u0002",
    "\u0002\u00ab\u00aa\u0003\u0002\u0002\u0002\u00ac\u00af\u0003\u0002\u0002",
    "\u0002\u00ad\u00ab\u0003\u0002\u0002\u0002\u00ad\u00ae\u0003\u0002\u0002",
    "\u0002\u00ae\u00b0\u0003\u0002\u0002\u0002\u00af\u00ad\u0003\u0002\u0002",
    "\u0002\u00b0\u00b1\u0007\u0002\u0002\u0003\u00b1\u0003\u0003\u0002\u0002",
    "\u0002\u00b2\u00b3\u0007\u0003\u0002\u0002\u00b3\u00b4\u0005\u0006\u0004",
    "\u0002\u00b4\u00b5\u0005\b\u0005\u0002\u00b5\u00b6\u0007\u0004\u0002",
    "\u0002\u00b6\u0005\u0003\u0002\u0002\u0002\u00b7\u00b8\u0005\u00a6T",
    "\u0002\u00b8\u0007\u0003\u0002\u0002\u0002\u00b9\u00bc\u0005\n\u0006",
    "\u0002\u00ba\u00bc\u0005n8\u0002\u00bb\u00b9\u0003\u0002\u0002\u0002",
    "\u00bb\u00ba\u0003\u0002\u0002\u0002\u00bc\t\u0003\u0002\u0002\u0002",
    "\u00bd\u00bf\u0005\u000e\b\u0002\u00be\u00c0\u0005\u000e\b\u0002\u00bf",
    "\u00be\u0003\u0002\u0002\u0002\u00bf\u00c0\u0003\u0002\u0002\u0002\u00c0",
    "\u000b\u0003\u0002\u0002\u0002\u00c1\u00c2\t\u0002\u0002\u0002\u00c2",
    "\r\u0003\u0002\u0002\u0002\u00c3\u00c5\u0005\f\u0007\u0002\u00c4\u00c3",
    "\u0003\u0002\u0002\u0002\u00c4\u00c5\u0003\u0002\u0002\u0002\u00c5\u00c6",
    "\u0003\u0002\u0002\u0002\u00c6\u00c7\u0007g\u0002\u0002\u00c7\u000f",
    "\u0003\u0002\u0002\u0002\u00c8\u00cb\u0005\u00a6T\u0002\u00c9\u00ca",
    "\u0007\n\u0002\u0002\u00ca\u00cc\u0005\u00a6T\u0002\u00cb\u00c9\u0003",
    "\u0002\u0002\u0002\u00cb\u00cc\u0003\u0002\u0002\u0002\u00cc\u0011\u0003",
    "\u0002\u0002\u0002\u00cd\u00ce\u0007\u000b\u0002\u0002\u00ce\u00d1\u0007",
    "x\u0002\u0002\u00cf\u00d0\u0007\n\u0002\u0002\u00d0\u00d2\u0005\u00a6",
    "T\u0002\u00d1\u00cf\u0003\u0002\u0002\u0002\u00d1\u00d2\u0003\u0002",
    "\u0002\u0002\u00d2\u00d3\u0003\u0002\u0002\u0002\u00d3\u00f0\u0007\u0004",
    "\u0002\u0002\u00d4\u00d7\u0007\u000b\u0002\u0002\u00d5\u00d8\u0007\f",
    "\u0002\u0002\u00d6\u00d8\u0005\u00a6T\u0002\u00d7\u00d5\u0003\u0002",
    "\u0002\u0002\u00d7\u00d6\u0003\u0002\u0002\u0002\u00d8\u00db\u0003\u0002",
    "\u0002\u0002\u00d9\u00da\u0007\n\u0002\u0002\u00da\u00dc\u0005\u00a6",
    "T\u0002\u00db\u00d9\u0003\u0002\u0002\u0002\u00db\u00dc\u0003\u0002",
    "\u0002\u0002\u00dc\u00dd\u0003\u0002\u0002\u0002\u00dd\u00de\u0007\r",
    "\u0002\u0002\u00de\u00df\u0007x\u0002\u0002\u00df\u00f0\u0007\u0004",
    "\u0002\u0002\u00e0\u00e1\u0007\u000b\u0002\u0002\u00e1\u00e2\u0007\u000e",
    "\u0002\u0002\u00e2\u00e7\u0005\u0010\t\u0002\u00e3\u00e4\u0007\u000f",
    "\u0002\u0002\u00e4\u00e6\u0005\u0010\t\u0002\u00e5\u00e3\u0003\u0002",
    "\u0002\u0002\u00e6\u00e9\u0003\u0002\u0002\u0002\u00e7\u00e5\u0003\u0002",
    "\u0002\u0002\u00e7\u00e8\u0003\u0002\u0002\u0002\u00e8\u00ea\u0003\u0002",
    "\u0002\u0002\u00e9\u00e7\u0003\u0002\u0002\u0002\u00ea\u00eb\u0007\u0010",
    "\u0002\u0002\u00eb\u00ec\u0007\r\u0002\u0002\u00ec\u00ed\u0007x\u0002",
    "\u0002\u00ed\u00ee\u0007\u0004\u0002\u0002\u00ee\u00f0\u0003\u0002\u0002",
    "\u0002\u00ef\u00cd\u0003\u0002\u0002\u0002\u00ef\u00d4\u0003\u0002\u0002",
    "\u0002\u00ef\u00e0\u0003\u0002\u0002\u0002\u00f0\u0013\u0003\u0002\u0002",
    "\u0002\u00f1\u00f2\t\u0003\u0002\u0002\u00f2\u00fc\u0005\u00a6T\u0002",
    "\u00f3\u00f4\u0007\u0014\u0002\u0002\u00f4\u00f9\u0005\u0016\f\u0002",
    "\u00f5\u00f6\u0007\u000f\u0002\u0002\u00f6\u00f8\u0005\u0016\f\u0002",
    "\u00f7\u00f5\u0003\u0002\u0002\u0002\u00f8\u00fb\u0003\u0002\u0002\u0002",
    "\u00f9\u00f7\u0003\u0002\u0002\u0002\u00f9\u00fa\u0003\u0002\u0002\u0002",
    "\u00fa\u00fd\u0003\u0002\u0002\u0002\u00fb\u00f9\u0003\u0002\u0002\u0002",
    "\u00fc\u00f3\u0003\u0002\u0002\u0002\u00fc\u00fd\u0003\u0002\u0002\u0002",
    "\u00fd\u00fe\u0003\u0002\u0002\u0002\u00fe\u0102\u0007\u000e\u0002\u0002",
    "\u00ff\u0101\u0005\u0018\r\u0002\u0100\u00ff\u0003\u0002\u0002\u0002",
    "\u0101\u0104\u0003\u0002\u0002\u0002\u0102\u0100\u0003\u0002\u0002\u0002",
    "\u0102\u0103\u0003\u0002\u0002\u0002\u0103\u0105\u0003\u0002\u0002\u0002",
    "\u0104\u0102\u0003\u0002\u0002\u0002\u0105\u0106\u0007\u0010\u0002\u0002",
    "\u0106\u0015\u0003\u0002\u0002\u0002\u0107\u0113\u0005F$\u0002\u0108",
    "\u0109\u0007\u0015\u0002\u0002\u0109\u010e\u0005n8\u0002\u010a\u010b",
    "\u0007\u000f\u0002\u0002\u010b\u010d\u0005n8\u0002\u010c\u010a\u0003",
    "\u0002\u0002\u0002\u010d\u0110\u0003\u0002\u0002\u0002\u010e\u010c\u0003",
    "\u0002\u0002\u0002\u010e\u010f\u0003\u0002\u0002\u0002\u010f\u0111\u0003",
    "\u0002\u0002\u0002\u0110\u010e\u0003\u0002\u0002\u0002\u0111\u0112\u0007",
    "\u0016\u0002\u0002\u0112\u0114\u0003\u0002\u0002\u0002\u0113\u0108\u0003",
    "\u0002\u0002\u0002\u0113\u0114\u0003\u0002\u0002\u0002\u0114\u0017\u0003",
    "\u0002\u0002\u0002\u0115\u011e\u0005\u001a\u000e\u0002\u0116\u011e\u0005",
    "\u001c\u000f\u0002\u0117\u011e\u0005\u001e\u0010\u0002\u0118\u011e\u0005",
    "\"\u0012\u0002\u0119\u011e\u0005&\u0014\u0002\u011a\u011e\u0005(\u0015",
    "\u0002\u011b\u011e\u0005,\u0017\u0002\u011c\u011e\u00050\u0019\u0002",
    "\u011d\u0115\u0003\u0002\u0002\u0002\u011d\u0116\u0003\u0002\u0002\u0002",
    "\u011d\u0117\u0003\u0002\u0002\u0002\u011d\u0118\u0003\u0002\u0002\u0002",
    "\u011d\u0119\u0003\u0002\u0002\u0002\u011d\u011a\u0003\u0002\u0002\u0002",
    "\u011d\u011b\u0003\u0002\u0002\u0002\u011d\u011c\u0003\u0002\u0002\u0002",
    "\u011e\u0019\u0003\u0002\u0002\u0002\u011f\u0123\u0005D#\u0002\u0120",
    "\u0122\t\u0004\u0002\u0002\u0121\u0120\u0003\u0002\u0002\u0002\u0122",
    "\u0125\u0003\u0002\u0002\u0002\u0123\u0121\u0003\u0002\u0002\u0002\u0123",
    "\u0124\u0003\u0002\u0002\u0002\u0124\u0126\u0003\u0002\u0002\u0002\u0125",
    "\u0123\u0003\u0002\u0002\u0002\u0126\u0129\u0005\u00a6T\u0002\u0127",
    "\u0128\u0007\u0017\u0002\u0002\u0128\u012a\u0005n8\u0002\u0129\u0127",
    "\u0003\u0002\u0002\u0002\u0129\u012a\u0003\u0002\u0002\u0002\u012a\u012b",
    "\u0003\u0002\u0002\u0002\u012b\u012c\u0007\u0004\u0002\u0002\u012c\u001b",
    "\u0003\u0002\u0002\u0002\u012d\u012e\u0007\u0018\u0002\u0002\u012e\u012f",
    "\u0005\u00a6T\u0002\u012f\u0132\u0007\u0019\u0002\u0002\u0130\u0133",
    "\u0007\f\u0002\u0002\u0131\u0133\u0005D#\u0002\u0132\u0130\u0003\u0002",
    "\u0002\u0002\u0132\u0131\u0003\u0002\u0002\u0002\u0133\u0134\u0003\u0002",
    "\u0002\u0002\u0134\u0135\u0007\u0004\u0002\u0002\u0135\u001d\u0003\u0002",
    "\u0002\u0002\u0136\u0137\u0007\u001a\u0002\u0002\u0137\u0138\u0005\u00a6",
    "T\u0002\u0138\u0140\u0007\u000e\u0002\u0002\u0139\u013d\u0005 \u0011",
    "\u0002\u013a\u013c\u0005 \u0011\u0002\u013b\u013a\u0003\u0002\u0002",
    "\u0002\u013c\u013f\u0003\u0002\u0002\u0002\u013d\u013b\u0003\u0002\u0002",
    "\u0002\u013d\u013e\u0003\u0002\u0002\u0002\u013e\u0141\u0003\u0002\u0002",
    "\u0002\u013f\u013d\u0003\u0002\u0002\u0002\u0140\u0139\u0003\u0002\u0002",
    "\u0002\u0140\u0141\u0003\u0002\u0002\u0002\u0141\u0142\u0003\u0002\u0002",
    "\u0002\u0142\u0143\u0007\u0010\u0002\u0002\u0143\u001f\u0003\u0002\u0002",
    "\u0002\u0144\u0145\u0005B\"\u0002\u0145\u0146\u0007\u0004\u0002\u0002",
    "\u0146!\u0003\u0002\u0002\u0002\u0147\u0148\u0007\u001b\u0002\u0002",
    "\u0148\u014a\u0005\u00a6T\u0002\u0149\u014b\u0005:\u001e\u0002\u014a",
    "\u0149\u0003\u0002\u0002\u0002\u014a\u014b\u0003\u0002\u0002\u0002\u014b",
    "\u014c\u0003\u0002\u0002\u0002\u014c\u014d\u0005P)\u0002\u014d#\u0003",
    "\u0002\u0002\u0002\u014e\u0154\u0005\u00a6T\u0002\u014f\u0151\u0007",
    "\u0015\u0002\u0002\u0150\u0152\u0005r:\u0002\u0151\u0150\u0003\u0002",
    "\u0002\u0002\u0151\u0152\u0003\u0002\u0002\u0002\u0152\u0153\u0003\u0002",
    "\u0002\u0002\u0153\u0155\u0007\u0016\u0002\u0002\u0154\u014f\u0003\u0002",
    "\u0002\u0002\u0154\u0155\u0003\u0002\u0002\u0002\u0155%\u0003\u0002",
    "\u0002\u0002\u0156\u0158\u0007\u001c\u0002\u0002\u0157\u0159\u0005\u00a6",
    "T\u0002\u0158\u0157\u0003\u0002\u0002\u0002\u0158\u0159\u0003\u0002",
    "\u0002\u0002\u0159\u015a\u0003\u0002\u0002\u0002\u015a\u015b\u0005:",
    "\u001e\u0002\u015b\u015d\u00052\u001a\u0002\u015c\u015e\u0005*\u0016",
    "\u0002\u015d\u015c\u0003\u0002\u0002\u0002\u015d\u015e\u0003\u0002\u0002",
    "\u0002\u015e\u0161\u0003\u0002\u0002\u0002\u015f\u0162\u0007\u0004\u0002",
    "\u0002\u0160\u0162\u0005P)\u0002\u0161\u015f\u0003\u0002\u0002\u0002",
    "\u0161\u0160\u0003\u0002\u0002\u0002\u0162\'\u0003\u0002\u0002\u0002",
    "\u0163\u0164\u0007\u001d\u0002\u0002\u0164\u0165\u0005:\u001e\u0002",
    "\u0165\u0166\u00052\u001a\u0002\u0166\u0167\u0005P)\u0002\u0167)\u0003",
    "\u0002\u0002\u0002\u0168\u0169\u0007\u001e\u0002\u0002\u0169\u016a\u0005",
    ":\u001e\u0002\u016a+\u0003\u0002\u0002\u0002\u016b\u016c\u0007\u001f",
    "\u0002\u0002\u016c\u016d\u0005\u00a6T\u0002\u016d\u016f\u00056\u001c",
    "\u0002\u016e\u0170\u0007n\u0002\u0002\u016f\u016e\u0003\u0002\u0002",
    "\u0002\u016f\u0170\u0003\u0002\u0002\u0002\u0170\u0171\u0003\u0002\u0002",
    "\u0002\u0171\u0172\u0007\u0004\u0002\u0002\u0172-\u0003\u0002\u0002",
    "\u0002\u0173\u0174\u0005\u00a6T\u0002\u0174/\u0003\u0002\u0002\u0002",
    "\u0175\u0176\u0007 \u0002\u0002\u0176\u0177\u0005\u00a6T\u0002\u0177",
    "\u0179\u0007\u000e\u0002\u0002\u0178\u017a\u0005.\u0018\u0002\u0179",
    "\u0178\u0003\u0002\u0002\u0002\u0179\u017a\u0003\u0002\u0002\u0002\u017a",
    "\u017f\u0003\u0002\u0002\u0002\u017b\u017c\u0007\u000f\u0002\u0002\u017c",
    "\u017e\u0005.\u0018\u0002\u017d\u017b\u0003\u0002\u0002\u0002\u017e",
    "\u0181\u0003\u0002\u0002\u0002\u017f\u017d\u0003\u0002\u0002\u0002\u017f",
    "\u0180\u0003\u0002\u0002\u0002\u0180\u0182\u0003\u0002\u0002\u0002\u0181",
    "\u017f\u0003\u0002\u0002\u0002\u0182\u0183\u0007\u0010\u0002\u0002\u0183",
    "1\u0003\u0002\u0002\u0002\u0184\u018b\u0005$\u0013\u0002\u0185\u018b",
    "\u00054\u001b\u0002\u0186\u018b\u0007t\u0002\u0002\u0187\u018b\u0007",
    "q\u0002\u0002\u0188\u018b\u0007s\u0002\u0002\u0189\u018b\u0007v\u0002",
    "\u0002\u018a\u0184\u0003\u0002\u0002\u0002\u018a\u0185\u0003\u0002\u0002",
    "\u0002\u018a\u0186\u0003\u0002\u0002\u0002\u018a\u0187\u0003\u0002\u0002",
    "\u0002\u018a\u0188\u0003\u0002\u0002\u0002\u018a\u0189\u0003\u0002\u0002",
    "\u0002\u018b\u018e\u0003\u0002\u0002\u0002\u018c\u018a\u0003\u0002\u0002",
    "\u0002\u018c\u018d\u0003\u0002\u0002\u0002\u018d3\u0003\u0002\u0002",
    "\u0002\u018e\u018c\u0003\u0002\u0002\u0002\u018f\u0190\t\u0005\u0002",
    "\u0002\u01905\u0003\u0002\u0002\u0002\u0191\u019a\u0007\u0015\u0002",
    "\u0002\u0192\u0197\u00058\u001d\u0002\u0193\u0194\u0007\u000f\u0002",
    "\u0002\u0194\u0196\u00058\u001d\u0002\u0195\u0193\u0003\u0002\u0002",
    "\u0002\u0196\u0199\u0003\u0002\u0002\u0002\u0197\u0195\u0003\u0002\u0002",
    "\u0002\u0197\u0198\u0003\u0002\u0002\u0002\u0198\u019b\u0003\u0002\u0002",
    "\u0002\u0199\u0197\u0003\u0002\u0002\u0002\u019a\u0192\u0003\u0002\u0002",
    "\u0002\u019a\u019b\u0003\u0002\u0002\u0002\u019b\u019c\u0003\u0002\u0002",
    "\u0002\u019c\u019d\u0007\u0016\u0002\u0002\u019d7\u0003\u0002\u0002",
    "\u0002\u019e\u01a3\u0005D#\u0002\u019f\u01a2\u0005L\'\u0002\u01a0\u01a2",
    "\u0007u\u0002\u0002\u01a1\u019f\u0003\u0002\u0002\u0002\u01a1\u01a0",
    "\u0003\u0002\u0002\u0002\u01a2\u01a5\u0003\u0002\u0002\u0002\u01a3\u01a1",
    "\u0003\u0002\u0002\u0002\u01a3\u01a4\u0003\u0002\u0002\u0002\u01a4\u01a7",
    "\u0003\u0002\u0002\u0002\u01a5\u01a3\u0003\u0002\u0002\u0002\u01a6\u01a8",
    "\u0005\u00a6T\u0002\u01a7\u01a6\u0003\u0002\u0002\u0002\u01a7\u01a8",
    "\u0003\u0002\u0002\u0002\u01a89\u0003\u0002\u0002\u0002\u01a9\u01b2",
    "\u0007\u0015\u0002\u0002\u01aa\u01af\u0005<\u001f\u0002\u01ab\u01ac",
    "\u0007\u000f\u0002\u0002\u01ac\u01ae\u0005<\u001f\u0002\u01ad\u01ab",
    "\u0003\u0002\u0002\u0002\u01ae\u01b1\u0003\u0002\u0002\u0002\u01af\u01ad",
    "\u0003\u0002\u0002\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0\u01b3",
    "\u0003\u0002\u0002\u0002\u01b1\u01af\u0003\u0002\u0002\u0002\u01b2\u01aa",
    "\u0003\u0002\u0002\u0002\u01b2\u01b3\u0003\u0002\u0002\u0002\u01b3\u01b4",
    "\u0003\u0002\u0002\u0002\u01b4\u01b5\u0007\u0016\u0002\u0002\u01b5;",
    "\u0003\u0002\u0002\u0002\u01b6\u01b8\u0005D#\u0002\u01b7\u01b9\u0005",
    "L\'\u0002\u01b8\u01b7\u0003\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002",
    "\u0002\u0002\u01b9\u01bb\u0003\u0002\u0002\u0002\u01ba\u01bc\u0005\u00a6",
    "T\u0002\u01bb\u01ba\u0003\u0002\u0002\u0002\u01bb\u01bc\u0003\u0002",
    "\u0002\u0002\u01bc=\u0003\u0002\u0002\u0002\u01bd\u01c6\u0007\u0015",
    "\u0002\u0002\u01be\u01c3\u0005@!\u0002\u01bf\u01c0\u0007\u000f\u0002",
    "\u0002\u01c0\u01c2\u0005@!\u0002\u01c1\u01bf\u0003\u0002\u0002\u0002",
    "\u01c2\u01c5\u0003\u0002\u0002\u0002\u01c3\u01c1\u0003\u0002\u0002\u0002",
    "\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c7\u0003\u0002\u0002\u0002",
    "\u01c5\u01c3\u0003\u0002\u0002\u0002\u01c6\u01be\u0003\u0002\u0002\u0002",
    "\u01c6\u01c7\u0003\u0002\u0002\u0002\u01c7\u01c8\u0003\u0002\u0002\u0002",
    "\u01c8\u01c9\u0007\u0016\u0002\u0002\u01c9?\u0003\u0002\u0002\u0002",
    "\u01ca\u01cc\u0005D#\u0002\u01cb\u01cd\u0005L\'\u0002\u01cc\u01cb\u0003",
    "\u0002\u0002\u0002\u01cc\u01cd\u0003\u0002\u0002\u0002\u01cdA\u0003",
    "\u0002\u0002\u0002\u01ce\u01d0\u0005D#\u0002\u01cf\u01d1\u0005L\'\u0002",
    "\u01d0\u01cf\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002\u0002\u0002",
    "\u01d1\u01d2\u0003\u0002\u0002\u0002\u01d2\u01d3\u0005\u00a6T\u0002",
    "\u01d3C\u0003\u0002\u0002\u0002\u01d4\u01d5\b#\u0001\u0002\u01d5\u01da",
    "\u0005N(\u0002\u01d6\u01da\u0005F$\u0002\u01d7\u01da\u0005H%\u0002\u01d8",
    "\u01da\u0005J&\u0002\u01d9\u01d4\u0003\u0002\u0002\u0002\u01d9\u01d6",
    "\u0003\u0002\u0002\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01d9\u01d8",
    "\u0003\u0002\u0002\u0002\u01da\u01e3\u0003\u0002\u0002\u0002\u01db\u01dc",
    "\f\u0004\u0002\u0002\u01dc\u01de\u0007!\u0002\u0002\u01dd\u01df\u0005",
    "n8\u0002\u01de\u01dd\u0003\u0002\u0002\u0002\u01de\u01df\u0003\u0002",
    "\u0002\u0002\u01df\u01e0\u0003\u0002\u0002\u0002\u01e0\u01e2\u0007\"",
    "\u0002\u0002\u01e1\u01db\u0003\u0002\u0002\u0002\u01e2\u01e5\u0003\u0002",
    "\u0002\u0002\u01e3\u01e1\u0003\u0002\u0002\u0002\u01e3\u01e4\u0003\u0002",
    "\u0002\u0002\u01e4E\u0003\u0002\u0002\u0002\u01e5\u01e3\u0003\u0002",
    "\u0002\u0002\u01e6\u01eb\u0005\u00a6T\u0002\u01e7\u01e8\u0007#\u0002",
    "\u0002\u01e8\u01ea\u0005\u00a6T\u0002\u01e9\u01e7\u0003\u0002\u0002",
    "\u0002\u01ea\u01ed\u0003\u0002\u0002\u0002\u01eb\u01e9\u0003\u0002\u0002",
    "\u0002\u01eb\u01ec\u0003\u0002\u0002\u0002\u01ecG\u0003\u0002\u0002",
    "\u0002\u01ed\u01eb\u0003\u0002\u0002\u0002\u01ee\u01ef\u0007$\u0002",
    "\u0002\u01ef\u01f0\u0007\u0015\u0002\u0002\u01f0\u01f1\u0005N(\u0002",
    "\u01f1\u01f2\u0007%\u0002\u0002\u01f2\u01f3\u0005D#\u0002\u01f3\u01f4",
    "\u0007\u0016\u0002\u0002\u01f4I\u0003\u0002\u0002\u0002\u01f5\u01f6",
    "\u0007\u001c\u0002\u0002\u01f6\u01fc\u0005> \u0002\u01f7\u01fb\u0005",
    "4\u001b\u0002\u01f8\u01fb\u0007s\u0002\u0002\u01f9\u01fb\u0007t\u0002",
    "\u0002\u01fa\u01f7\u0003\u0002\u0002\u0002\u01fa\u01f8\u0003\u0002\u0002",
    "\u0002\u01fa\u01f9\u0003\u0002\u0002\u0002\u01fb\u01fe\u0003\u0002\u0002",
    "\u0002\u01fc\u01fa\u0003\u0002\u0002\u0002\u01fc\u01fd\u0003\u0002\u0002",
    "\u0002\u01fd\u0201\u0003\u0002\u0002\u0002\u01fe\u01fc\u0003\u0002\u0002",
    "\u0002\u01ff\u0200\u0007\u001e\u0002\u0002\u0200\u0202\u0005> \u0002",
    "\u0201\u01ff\u0003\u0002\u0002\u0002\u0201\u0202\u0003\u0002\u0002\u0002",
    "\u0202K\u0003\u0002\u0002\u0002\u0203\u0204\t\u0006\u0002\u0002\u0204",
    "M\u0003\u0002\u0002\u0002\u0205\u0206\t\u0007\u0002\u0002\u0206O\u0003",
    "\u0002\u0002\u0002\u0207\u020b\u0007\u000e\u0002\u0002\u0208\u020a\u0005",
    "R*\u0002\u0209\u0208\u0003\u0002\u0002\u0002\u020a\u020d\u0003\u0002",
    "\u0002\u0002\u020b\u0209\u0003\u0002\u0002\u0002\u020b\u020c\u0003\u0002",
    "\u0002\u0002\u020c\u020e\u0003\u0002\u0002\u0002\u020d\u020b\u0003\u0002",
    "\u0002\u0002\u020e\u020f\u0007\u0010\u0002\u0002\u020fQ\u0003\u0002",
    "\u0002\u0002\u0210\u021d\u0005V,\u0002\u0211\u021d\u0005X-\u0002\u0212",
    "\u021d\u0005\\/\u0002\u0213\u021d\u0005P)\u0002\u0214\u021d\u0005~@",
    "\u0002\u0215\u021d\u0005^0\u0002\u0216\u021d\u0005`1\u0002\u0217\u021d",
    "\u0005b2\u0002\u0218\u021d\u0005d3\u0002\u0219\u021d\u0005f4\u0002\u021a",
    "\u021d\u0005h5\u0002\u021b\u021d\u0005Z.\u0002\u021c\u0210\u0003\u0002",
    "\u0002\u0002\u021c\u0211\u0003\u0002\u0002\u0002\u021c\u0212\u0003\u0002",
    "\u0002\u0002\u021c\u0213\u0003\u0002\u0002\u0002\u021c\u0214\u0003\u0002",
    "\u0002\u0002\u021c\u0215\u0003\u0002\u0002\u0002\u021c\u0216\u0003\u0002",
    "\u0002\u0002\u021c\u0217\u0003\u0002\u0002\u0002\u021c\u0218\u0003\u0002",
    "\u0002\u0002\u021c\u0219\u0003\u0002\u0002\u0002\u021c\u021a\u0003\u0002",
    "\u0002\u0002\u021c\u021b\u0003\u0002\u0002\u0002\u021dS\u0003\u0002",
    "\u0002\u0002\u021e\u021f\u0005n8\u0002\u021f\u0220\u0007\u0004\u0002",
    "\u0002\u0220U\u0003\u0002\u0002\u0002\u0221\u0222\u0007,\u0002\u0002",
    "\u0222\u0223\u0007\u0015\u0002\u0002\u0223\u0224\u0005n8\u0002\u0224",
    "\u0225\u0007\u0016\u0002\u0002\u0225\u0228\u0005R*\u0002\u0226\u0227",
    "\u0007-\u0002\u0002\u0227\u0229\u0005R*\u0002\u0228\u0226\u0003\u0002",
    "\u0002\u0002\u0228\u0229\u0003\u0002\u0002\u0002\u0229W\u0003\u0002",
    "\u0002\u0002\u022a\u022b\u0007.\u0002\u0002\u022b\u022c\u0007\u0015",
    "\u0002\u0002\u022c\u022d\u0005n8\u0002\u022d\u022e\u0007\u0016\u0002",
    "\u0002\u022e\u022f\u0005R*\u0002\u022fY\u0003\u0002\u0002\u0002\u0230",
    "\u0233\u0005j6\u0002\u0231\u0233\u0005T+\u0002\u0232\u0230\u0003\u0002",
    "\u0002\u0002\u0232\u0231\u0003\u0002\u0002\u0002\u0233[\u0003\u0002",
    "\u0002\u0002\u0234\u0235\u0007\u0019\u0002\u0002\u0235\u0238\u0007\u0015",
    "\u0002\u0002\u0236\u0239\u0005Z.\u0002\u0237\u0239\u0007\u0004\u0002",
    "\u0002\u0238\u0236\u0003\u0002\u0002\u0002\u0238\u0237\u0003\u0002\u0002",
    "\u0002\u0239\u023b\u0003\u0002\u0002\u0002\u023a\u023c\u0005n8\u0002",
    "\u023b\u023a\u0003\u0002\u0002\u0002\u023b\u023c\u0003\u0002\u0002\u0002",
    "\u023c\u023d\u0003\u0002\u0002\u0002\u023d\u023f\u0007\u0004\u0002\u0002",
    "\u023e\u0240\u0005n8\u0002\u023f\u023e\u0003\u0002\u0002\u0002\u023f",
    "\u0240\u0003\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002\u0002\u0241",
    "\u0242\u0007\u0016\u0002\u0002\u0242\u0243\u0005R*\u0002\u0243]\u0003",
    "\u0002\u0002\u0002\u0244\u0245\u0007/\u0002\u0002\u0245\u0246\u0005",
    "R*\u0002\u0246\u0247\u0007.\u0002\u0002\u0247\u0248\u0007\u0015\u0002",
    "\u0002\u0248\u0249\u0005n8\u0002\u0249\u024a\u0007\u0016\u0002\u0002",
    "\u024a\u024b\u0007\u0004\u0002\u0002\u024b_\u0003\u0002\u0002\u0002",
    "\u024c\u024d\u00070\u0002\u0002\u024d\u024e\u0007\u0004\u0002\u0002",
    "\u024ea\u0003\u0002\u0002\u0002\u024f\u0250\u00071\u0002\u0002\u0250",
    "\u0251\u0007\u0004\u0002\u0002\u0251c\u0003\u0002\u0002\u0002\u0252",
    "\u0253\u00072\u0002\u0002\u0253\u0254\u0007\u0004\u0002\u0002\u0254",
    "e\u0003\u0002\u0002\u0002\u0255\u0257\u00073\u0002\u0002\u0256\u0258",
    "\u0005n8\u0002\u0257\u0256\u0003\u0002\u0002\u0002\u0257\u0258\u0003",
    "\u0002\u0002\u0002\u0258\u0259\u0003\u0002\u0002\u0002\u0259\u025a\u0007",
    "\u0004\u0002\u0002\u025ag\u0003\u0002\u0002\u0002\u025b\u025c\u0007",
    "4\u0002\u0002\u025c\u025d\u0007\u0004\u0002\u0002\u025di\u0003\u0002",
    "\u0002\u0002\u025e\u025f\u0007*\u0002\u0002\u025f\u0262\u0005l7\u0002",
    "\u0260\u0262\u0005B\"\u0002\u0261\u025e\u0003\u0002\u0002\u0002\u0261",
    "\u0260\u0003\u0002\u0002\u0002\u0262\u0265\u0003\u0002\u0002\u0002\u0263",
    "\u0264\u0007\u0017\u0002\u0002\u0264\u0266\u0005n8\u0002\u0265\u0263",
    "\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002\u0002\u0002\u0266\u0267",
    "\u0003\u0002\u0002\u0002\u0267\u0268\u0007\u0004\u0002\u0002\u0268k",
    "\u0003\u0002\u0002\u0002\u0269\u0270\u0007\u0015\u0002\u0002\u026a\u026c",
    "\u0005\u00a6T\u0002\u026b\u026a\u0003\u0002\u0002\u0002\u026b\u026c",
    "\u0003\u0002\u0002\u0002\u026c\u026d\u0003\u0002\u0002\u0002\u026d\u026f",
    "\u0007\u000f\u0002\u0002\u026e\u026b\u0003\u0002\u0002\u0002\u026f\u0272",
    "\u0003\u0002\u0002\u0002\u0270\u026e\u0003\u0002\u0002\u0002\u0270\u0271",
    "\u0003\u0002\u0002\u0002\u0271\u0274\u0003\u0002\u0002\u0002\u0272\u0270",
    "\u0003\u0002\u0002\u0002\u0273\u0275\u0005\u00a6T\u0002\u0274\u0273",
    "\u0003\u0002\u0002\u0002\u0274\u0275\u0003\u0002\u0002\u0002\u0275\u0276",
    "\u0003\u0002\u0002\u0002\u0276\u0277\u0007\u0016\u0002\u0002\u0277m",
    "\u0003\u0002\u0002\u0002\u0278\u0279\b8\u0001\u0002\u0279\u027a\u0007",
    "7\u0002\u0002\u027a\u0291\u0005D#\u0002\u027b\u027c\u00078\u0002\u0002",
    "\u027c\u027d\u0005n8\u0002\u027d\u027e\u0007\u0015\u0002\u0002\u027e",
    "\u027f\u0005x=\u0002\u027f\u0280\u0007\u0016\u0002\u0002\u0280\u0291",
    "\u0003\u0002\u0002\u0002\u0281\u0282\u0007\u0015\u0002\u0002\u0282\u0283",
    "\u0005n8\u0002\u0283\u0284\u0007\u0016\u0002\u0002\u0284\u0291\u0003",
    "\u0002\u0002\u0002\u0285\u0286\t\b\u0002\u0002\u0286\u0291\u0005n8\u0015",
    "\u0287\u0288\t\t\u0002\u0002\u0288\u0291\u0005n8\u0014\u0289\u028a\t",
    "\n\u0002\u0002\u028a\u0291\u0005n8\u0013\u028b\u028c\u0007=\u0002\u0002",
    "\u028c\u0291\u0005n8\u0012\u028d\u028e\u0007>\u0002\u0002\u028e\u0291",
    "\u0005n8\u0011\u028f\u0291\u0005p9\u0002\u0290\u0278\u0003\u0002\u0002",
    "\u0002\u0290\u027b\u0003\u0002\u0002\u0002\u0290\u0281\u0003\u0002\u0002",
    "\u0002\u0290\u0285\u0003\u0002\u0002\u0002\u0290\u0287\u0003\u0002\u0002",
    "\u0002\u0290\u0289\u0003\u0002\u0002\u0002\u0290\u028b\u0003\u0002\u0002",
    "\u0002\u0290\u028d\u0003\u0002\u0002\u0002\u0290\u028f\u0003\u0002\u0002",
    "\u0002\u0291\u02cd\u0003\u0002\u0002\u0002\u0292\u0293\f\u0017\u0002",
    "\u0002\u0293\u0294\u0007#\u0002\u0002\u0294\u02cc\u0005n8\u0018\u0295",
    "\u0296\f\u0010\u0002\u0002\u0296\u0297\u0007?\u0002\u0002\u0297\u02cc",
    "\u0005n8\u0011\u0298\u0299\f\u000f\u0002\u0002\u0299\u029a\t\u000b\u0002",
    "\u0002\u029a\u02cc\u0005n8\u0010\u029b\u029c\f\u000e\u0002\u0002\u029c",
    "\u029d\t\t\u0002\u0002\u029d\u02cc\u0005n8\u000f\u029e\u029f\f\r\u0002",
    "\u0002\u029f\u02a0\t\f\u0002\u0002\u02a0\u02cc\u0005n8\u000e\u02a1\u02a2",
    "\f\f\u0002\u0002\u02a2\u02a3\u0007D\u0002\u0002\u02a3\u02cc\u0005n8",
    "\r\u02a4\u02a5\f\u000b\u0002\u0002\u02a5\u02a6\u0007\u0007\u0002\u0002",
    "\u02a6\u02cc\u0005n8\f\u02a7\u02a8\f\n\u0002\u0002\u02a8\u02a9\u0007",
    "E\u0002\u0002\u02a9\u02cc\u0005n8\u000b\u02aa\u02ab\f\t\u0002\u0002",
    "\u02ab\u02ac\t\r\u0002\u0002\u02ac\u02cc\u0005n8\n\u02ad\u02ae\f\b\u0002",
    "\u0002\u02ae\u02af\t\u000e\u0002\u0002\u02af\u02cc\u0005n8\t\u02b0\u02b1",
    "\f\u0007\u0002\u0002\u02b1\u02b2\u0007H\u0002\u0002\u02b2\u02cc\u0005",
    "n8\b\u02b3\u02b4\f\u0006\u0002\u0002\u02b4\u02b5\u0007I\u0002\u0002",
    "\u02b5\u02cc\u0005n8\u0007\u02b6\u02b7\f\u0005\u0002\u0002\u02b7\u02b8",
    "\u0007J\u0002\u0002\u02b8\u02b9\u0005n8\u0002\u02b9\u02ba\u0007K\u0002",
    "\u0002\u02ba\u02bb\u0005n8\u0006\u02bb\u02cc\u0003\u0002\u0002\u0002",
    "\u02bc\u02bd\f\u0004\u0002\u0002\u02bd\u02be\t\u000f\u0002\u0002\u02be",
    "\u02cc\u0005n8\u0005\u02bf\u02c0\f\u001c\u0002\u0002\u02c0\u02cc\t\b",
    "\u0002\u0002\u02c1\u02c2\f\u001a\u0002\u0002\u02c2\u02c3\u0007!\u0002",
    "\u0002\u02c3\u02c4\u0005n8\u0002\u02c4\u02c5\u0007\"\u0002\u0002\u02c5",
    "\u02cc\u0003\u0002\u0002\u0002\u02c6\u02c7\f\u0018\u0002\u0002\u02c7",
    "\u02c8\u0007\u0015\u0002\u0002\u02c8\u02c9\u0005x=\u0002\u02c9\u02ca",
    "\u0007\u0016\u0002\u0002\u02ca\u02cc\u0003\u0002\u0002\u0002\u02cb\u0292",
    "\u0003\u0002\u0002\u0002\u02cb\u0295\u0003\u0002\u0002\u0002\u02cb\u0298",
    "\u0003\u0002\u0002\u0002\u02cb\u029b\u0003\u0002\u0002\u0002\u02cb\u029e",
    "\u0003\u0002\u0002\u0002\u02cb\u02a1\u0003\u0002\u0002\u0002\u02cb\u02a4",
    "\u0003\u0002\u0002\u0002\u02cb\u02a7\u0003\u0002\u0002\u0002\u02cb\u02aa",
    "\u0003\u0002\u0002\u0002\u02cb\u02ad\u0003\u0002\u0002\u0002\u02cb\u02b0",
    "\u0003\u0002\u0002\u0002\u02cb\u02b3\u0003\u0002\u0002\u0002\u02cb\u02b6",
    "\u0003\u0002\u0002\u0002\u02cb\u02bc\u0003\u0002\u0002\u0002\u02cb\u02bf",
    "\u0003\u0002\u0002\u0002\u02cb\u02c1\u0003\u0002\u0002\u0002\u02cb\u02c6",
    "\u0003\u0002\u0002\u0002\u02cc\u02cf\u0003\u0002\u0002\u0002\u02cd\u02cb",
    "\u0003\u0002\u0002\u0002\u02cd\u02ce\u0003\u0002\u0002\u0002\u02ceo",
    "\u0003\u0002\u0002\u0002\u02cf\u02cd\u0003\u0002\u0002\u0002\u02d0\u02d8",
    "\u0005\u00a4S\u0002\u02d1\u02d8\u0005\u00a6T\u0002\u02d2\u02d8\u0005",
    "z>\u0002\u02d3\u02d8\u0005|?\u0002\u02d4\u02d8\u0007k\u0002\u0002\u02d5",
    "\u02d8\u0007x\u0002\u0002\u02d6\u02d8\u0007h\u0002\u0002\u02d7\u02d0",
    "\u0003\u0002\u0002\u0002\u02d7\u02d1\u0003\u0002\u0002\u0002\u02d7\u02d2",
    "\u0003\u0002\u0002\u0002\u02d7\u02d3\u0003\u0002\u0002\u0002\u02d7\u02d4",
    "\u0003\u0002\u0002\u0002\u02d7\u02d5\u0003\u0002\u0002\u0002\u02d7\u02d6",
    "\u0003\u0002\u0002\u0002\u02d8q\u0003\u0002\u0002\u0002\u02d9\u02de",
    "\u0005n8\u0002\u02da\u02db\u0007\u000f\u0002\u0002\u02db\u02dd\u0005",
    "n8\u0002\u02dc\u02da\u0003\u0002\u0002\u0002\u02dd\u02e0\u0003\u0002",
    "\u0002\u0002\u02de\u02dc\u0003\u0002\u0002\u0002\u02de\u02df\u0003\u0002",
    "\u0002\u0002\u02dfs\u0003\u0002\u0002\u0002\u02e0\u02de\u0003\u0002",
    "\u0002\u0002\u02e1\u02e6\u0005v<\u0002\u02e2\u02e3\u0007\u000f\u0002",
    "\u0002\u02e3\u02e5\u0005v<\u0002\u02e4\u02e2\u0003\u0002\u0002\u0002",
    "\u02e5\u02e8\u0003\u0002\u0002\u0002\u02e6\u02e4\u0003\u0002\u0002\u0002",
    "\u02e6\u02e7\u0003\u0002\u0002\u0002\u02e7\u02ea\u0003\u0002\u0002\u0002",
    "\u02e8\u02e6\u0003\u0002\u0002\u0002\u02e9\u02eb\u0007\u000f\u0002\u0002",
    "\u02ea\u02e9\u0003\u0002\u0002\u0002\u02ea\u02eb\u0003\u0002\u0002\u0002",
    "\u02ebu\u0003\u0002\u0002\u0002\u02ec\u02ed\u0005\u00a6T\u0002\u02ed",
    "\u02ee\u0007K\u0002\u0002\u02ee\u02ef\u0005n8\u0002\u02efw\u0003\u0002",
    "\u0002\u0002\u02f0\u02f2\u0007\u000e\u0002\u0002\u02f1\u02f3\u0005t",
    ";\u0002\u02f2\u02f1\u0003\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002",
    "\u0002\u0002\u02f3\u02f4\u0003\u0002\u0002\u0002\u02f4\u02f9\u0007\u0010",
    "\u0002\u0002\u02f5\u02f7\u0005r:\u0002\u02f6\u02f5\u0003\u0002\u0002",
    "\u0002\u02f6\u02f7\u0003\u0002\u0002\u0002\u02f7\u02f9\u0003\u0002\u0002",
    "\u0002\u02f8\u02f0\u0003\u0002\u0002\u0002\u02f8\u02f6\u0003\u0002\u0002",
    "\u0002\u02f9y\u0003\u0002\u0002\u0002\u02fa\u0303\u0007\u0015\u0002",
    "\u0002\u02fb\u0300\u0005n8\u0002\u02fc\u02fd\u0007\u000f\u0002\u0002",
    "\u02fd\u02ff\u0005n8\u0002\u02fe\u02fc\u0003\u0002\u0002\u0002\u02ff",
    "\u0302\u0003\u0002\u0002\u0002\u0300\u02fe\u0003\u0002\u0002\u0002\u0300",
    "\u0301\u0003\u0002\u0002\u0002\u0301\u0304\u0003\u0002\u0002\u0002\u0302",
    "\u0300\u0003\u0002\u0002\u0002\u0303\u02fb\u0003\u0002\u0002\u0002\u0303",
    "\u0304\u0003\u0002\u0002\u0002\u0304\u0305\u0003\u0002\u0002\u0002\u0305",
    "\u0313\u0007\u0016\u0002\u0002\u0306\u030f\u0007!\u0002\u0002\u0307",
    "\u030c\u0005n8\u0002\u0308\u0309\u0007\u000f\u0002\u0002\u0309\u030b",
    "\u0005n8\u0002\u030a\u0308\u0003\u0002\u0002\u0002\u030b\u030e\u0003",
    "\u0002\u0002\u0002\u030c\u030a\u0003\u0002\u0002\u0002\u030c\u030d\u0003",
    "\u0002\u0002\u0002\u030d\u0310\u0003\u0002\u0002\u0002\u030e\u030c\u0003",
    "\u0002\u0002\u0002\u030f\u0307\u0003\u0002\u0002\u0002\u030f\u0310\u0003",
    "\u0002\u0002\u0002\u0310\u0311\u0003\u0002\u0002\u0002\u0311\u0313\u0007",
    "\"\u0002\u0002\u0312\u02fa\u0003\u0002\u0002\u0002\u0312\u0306\u0003",
    "\u0002\u0002\u0002\u0313{\u0003\u0002\u0002\u0002\u0314\u0315\u0005",
    "N(\u0002\u0315}\u0003\u0002\u0002\u0002\u0316\u0318\u0007V\u0002\u0002",
    "\u0317\u0319\u0007x\u0002\u0002\u0318\u0317\u0003\u0002\u0002\u0002",
    "\u0318\u0319\u0003\u0002\u0002\u0002\u0319\u031a\u0003\u0002\u0002\u0002",
    "\u031a\u031b\u0005\u0080A\u0002\u031b\u007f\u0003\u0002\u0002\u0002",
    "\u031c\u0320\u0007\u000e\u0002\u0002\u031d\u031f\u0005\u0082B\u0002",
    "\u031e\u031d\u0003\u0002\u0002\u0002\u031f\u0322\u0003\u0002\u0002\u0002",
    "\u0320\u031e\u0003\u0002\u0002\u0002\u0320\u0321\u0003\u0002\u0002\u0002",
    "\u0321\u0323\u0003\u0002\u0002\u0002\u0322\u0320\u0003\u0002\u0002\u0002",
    "\u0323\u0324\u0007\u0010\u0002\u0002\u0324\u0081\u0003\u0002\u0002\u0002",
    "\u0325\u033a\u0005\u00a6T\u0002\u0326\u033a\u0005\u0080A\u0002\u0327",
    "\u033a\u0005\u0084C\u0002\u0328\u033a\u0005\u0088E\u0002\u0329\u033a",
    "\u0005\u008aF\u0002\u032a\u033a\u0005\u0090I\u0002\u032b\u033a\u0005",
    "\u0092J\u0002\u032c\u033a\u0005\u009aN\u0002\u032d\u033a\u0005\u0094",
    "K\u0002\u032e\u033a\u0005\u0098M\u0002\u032f\u033a\u00072\u0002\u0002",
    "\u0330\u033a\u00071\u0002\u0002\u0331\u033a\u0005\u009eP\u0002\u0332",
    "\u033a\u0005\u00a0Q\u0002\u0333\u033a\u0005\u00a2R\u0002\u0334\u033a",
    "\u0007W\u0002\u0002\u0335\u033a\u0007X\u0002\u0002\u0336\u033a\u0005",
    "\u00a4S\u0002\u0337\u033a\u0007x\u0002\u0002\u0338\u033a\u0007k\u0002",
    "\u0002\u0339\u0325\u0003\u0002\u0002\u0002\u0339\u0326\u0003\u0002\u0002",
    "\u0002\u0339\u0327\u0003\u0002\u0002\u0002\u0339\u0328\u0003\u0002\u0002",
    "\u0002\u0339\u0329\u0003\u0002\u0002\u0002\u0339\u032a\u0003\u0002\u0002",
    "\u0002\u0339\u032b\u0003\u0002\u0002\u0002\u0339\u032c\u0003\u0002\u0002",
    "\u0002\u0339\u032d\u0003\u0002\u0002\u0002\u0339\u032e\u0003\u0002\u0002",
    "\u0002\u0339\u032f\u0003\u0002\u0002\u0002\u0339\u0330\u0003\u0002\u0002",
    "\u0002\u0339\u0331\u0003\u0002\u0002\u0002\u0339\u0332\u0003\u0002\u0002",
    "\u0002\u0339\u0333\u0003\u0002\u0002\u0002\u0339\u0334\u0003\u0002\u0002",
    "\u0002\u0339\u0335\u0003\u0002\u0002\u0002\u0339\u0336\u0003\u0002\u0002",
    "\u0002\u0339\u0337\u0003\u0002\u0002\u0002\u0339\u0338\u0003\u0002\u0002",
    "\u0002\u033a\u0083\u0003\u0002\u0002\u0002\u033b\u033e\u0005\u0086D",
    "\u0002\u033c\u033e\u0005\u009cO\u0002\u033d\u033b\u0003\u0002\u0002",
    "\u0002\u033d\u033c\u0003\u0002\u0002\u0002\u033e\u0085\u0003\u0002\u0002",
    "\u0002\u033f\u0344\u00073\u0002\u0002\u0340\u0344\u0007(\u0002\u0002",
    "\u0341\u0344\u0005N(\u0002\u0342\u0344\u0007y\u0002\u0002\u0343\u033f",
    "\u0003\u0002\u0002\u0002\u0343\u0340\u0003\u0002\u0002\u0002\u0343\u0341",
    "\u0003\u0002\u0002\u0002\u0343\u0342\u0003\u0002\u0002\u0002\u0344\u0351",
    "\u0003\u0002\u0002\u0002\u0345\u0347\u0007\u0015\u0002\u0002\u0346\u0348",
    "\u0005\u0084C\u0002\u0347\u0346\u0003\u0002\u0002\u0002\u0347\u0348",
    "\u0003\u0002\u0002\u0002\u0348\u034d\u0003\u0002\u0002\u0002\u0349\u034a",
    "\u0007\u000f\u0002\u0002\u034a\u034c\u0005\u0084C\u0002\u034b\u0349",
    "\u0003\u0002\u0002\u0002\u034c\u034f\u0003\u0002\u0002\u0002\u034d\u034b",
    "\u0003\u0002\u0002\u0002\u034d\u034e\u0003\u0002\u0002\u0002\u034e\u0350",
    "\u0003\u0002\u0002\u0002\u034f\u034d\u0003\u0002\u0002\u0002\u0350\u0352",
    "\u0007\u0016\u0002\u0002\u0351\u0345\u0003\u0002\u0002\u0002\u0351\u0352",
    "\u0003\u0002\u0002\u0002\u0352\u0087\u0003\u0002\u0002\u0002\u0353\u0354",
    "\u0007Y\u0002\u0002\u0354\u0355\u0005\u008cG\u0002\u0355\u0356\u0007",
    "Z\u0002\u0002\u0356\u0357\u0005\u0084C\u0002\u0357\u0089\u0003\u0002",
    "\u0002\u0002\u0358\u0359\u0005\u008cG\u0002\u0359\u035a\u0007Z\u0002",
    "\u0002\u035a\u035b\u0005\u0084C\u0002\u035b\u008b\u0003\u0002\u0002",
    "\u0002\u035c\u0362\u0005\u00a6T\u0002\u035d\u035e\u0007\u0015\u0002",
    "\u0002\u035e\u035f\u0005\u008eH\u0002\u035f\u0360\u0007\u0016\u0002",
    "\u0002\u0360\u0362\u0003\u0002\u0002\u0002\u0361\u035c\u0003\u0002\u0002",
    "\u0002\u0361\u035d\u0003\u0002\u0002\u0002\u0362\u008d\u0003\u0002\u0002",
    "\u0002\u0363\u0368\u0007y\u0002\u0002\u0364\u0365\u0007\u000f\u0002",
    "\u0002\u0365\u0367\u0007y\u0002\u0002\u0366\u0364\u0003\u0002\u0002",
    "\u0002\u0367\u036a\u0003\u0002\u0002\u0002\u0368\u0366\u0003\u0002\u0002",
    "\u0002\u0368\u0369\u0003\u0002\u0002\u0002\u0369\u008f\u0003\u0002\u0002",
    "\u0002\u036a\u0368\u0003\u0002\u0002\u0002\u036b\u036c\u0007[\u0002",
    "\u0002\u036c\u036d\u0007y\u0002\u0002\u036d\u0091\u0003\u0002\u0002",
    "\u0002\u036e\u036f\u0007y\u0002\u0002\u036f\u0370\u0007K\u0002\u0002",
    "\u0370\u0093\u0003\u0002\u0002\u0002\u0371\u0372\u0007\u001c\u0002\u0002",
    "\u0372\u0373\u0007y\u0002\u0002\u0373\u0375\u0007\u0015\u0002\u0002",
    "\u0374\u0376\u0005\u008eH\u0002\u0375\u0374\u0003\u0002\u0002\u0002",
    "\u0375\u0376\u0003\u0002\u0002\u0002\u0376\u0377\u0003\u0002\u0002\u0002",
    "\u0377\u037a\u0007\u0016\u0002\u0002\u0378\u0379\u0007\\\u0002\u0002",
    "\u0379\u037b\u0005\u008eH\u0002\u037a\u0378\u0003\u0002\u0002\u0002",
    "\u037a\u037b\u0003\u0002\u0002\u0002\u037b\u037c\u0003\u0002\u0002\u0002",
    "\u037c\u037d\u0005\u0080A\u0002\u037d\u0095\u0003\u0002\u0002\u0002",
    "\u037e\u037f\u0007]\u0002\u0002\u037f\u0380\u0005\u009cO\u0002\u0380",
    "\u0381\u0007K\u0002\u0002\u0381\u0382\u0005\u0080A\u0002\u0382\u0097",
    "\u0003\u0002\u0002\u0002\u0383\u0386\u0007\u0019\u0002\u0002\u0384\u0387",
    "\u0005\u0080A\u0002\u0385\u0387\u0005\u0084C\u0002\u0386\u0384\u0003",
    "\u0002\u0002\u0002\u0386\u0385\u0003\u0002\u0002\u0002\u0387\u0388\u0003",
    "\u0002\u0002\u0002\u0388\u038b\u0005\u0084C\u0002\u0389\u038c\u0005",
    "\u0080A\u0002\u038a\u038c\u0005\u0084C\u0002\u038b\u0389\u0003\u0002",
    "\u0002\u0002\u038b\u038a\u0003\u0002\u0002\u0002\u038c\u038d\u0003\u0002",
    "\u0002\u0002\u038d\u038e\u0005\u0080A\u0002\u038e\u0099\u0003\u0002",
    "\u0002\u0002\u038f\u0390\u0007^\u0002\u0002\u0390\u0394\u0005\u0084",
    "C\u0002\u0391\u0393\u0005\u0096L\u0002\u0392\u0391\u0003\u0002\u0002",
    "\u0002\u0393\u0396\u0003\u0002\u0002\u0002\u0394\u0392\u0003\u0002\u0002",
    "\u0002\u0394\u0395\u0003\u0002\u0002\u0002\u0395\u039a\u0003\u0002\u0002",
    "\u0002\u0396\u0394\u0003\u0002\u0002\u0002\u0397\u0398\u0007_\u0002",
    "\u0002\u0398\u0399\u0007K\u0002\u0002\u0399\u039b\u0005\u0080A\u0002",
    "\u039a\u0397\u0003\u0002\u0002\u0002\u039a\u039b\u0003\u0002\u0002\u0002",
    "\u039b\u009b\u0003\u0002\u0002\u0002\u039c\u039d\t\u0010\u0002\u0002",
    "\u039d\u009d\u0003\u0002\u0002\u0002\u039e\u039f\u0007V\u0002\u0002",
    "\u039f\u03a0\u0007y\u0002\u0002\u03a0\u03a1\u0005\u0080A\u0002\u03a1",
    "\u009f\u0003\u0002\u0002\u0002\u03a2\u03a3\u0007`\u0002\u0002\u03a3",
    "\u03a4\u0007\u0015\u0002\u0002\u03a4\u03a5\u0007x\u0002\u0002\u03a5",
    "\u03a6\u0007\u0016\u0002\u0002\u03a6\u00a1\u0003\u0002\u0002\u0002\u03a7",
    "\u03a8\u0007a\u0002\u0002\u03a8\u03a9\u0007\u0015\u0002\u0002\u03a9",
    "\u03aa\u0007x\u0002\u0002\u03aa\u03ab\u0007\u0016\u0002\u0002\u03ab",
    "\u00a3\u0003\u0002\u0002\u0002\u03ac\u03ae\t\u0011\u0002\u0002\u03ad",
    "\u03af\u0007l\u0002\u0002\u03ae\u03ad\u0003\u0002\u0002\u0002\u03ae",
    "\u03af\u0003\u0002\u0002\u0002\u03af\u00a5\u0003\u0002\u0002\u0002\u03b0",
    "\u03b1\t\u0012\u0002\u0002\u03b1\u00a7\u0003\u0002\u0002\u0002d\u00ab",
    "\u00ad\u00bb\u00bf\u00c4\u00cb\u00d1\u00d7\u00db\u00e7\u00ef\u00f9\u00fc",
    "\u0102\u010e\u0113\u011d\u0123\u0129\u0132\u013d\u0140\u014a\u0151\u0154",
    "\u0158\u015d\u0161\u016f\u0179\u017f\u018a\u018c\u0197\u019a\u01a1\u01a3",
    "\u01a7\u01af\u01b2\u01b8\u01bb\u01c3\u01c6\u01cc\u01d0\u01d9\u01de\u01e3",
    "\u01eb\u01fa\u01fc\u0201\u020b\u021c\u0228\u0232\u0238\u023b\u023f\u0257",
    "\u0261\u0265\u026b\u0270\u0274\u0290\u02cb\u02cd\u02d7\u02de\u02e6\u02ea",
    "\u02f2\u02f6\u02f8\u0300\u0303\u030c\u030f\u0312\u0318\u0320\u0339\u033d",
    "\u0343\u0347\u034d\u0351\u0361\u0368\u0375\u037a\u0386\u038b\u0394\u039a",
    "\u03ae"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'pragma'", "';'", "'<'", "'<='", "'^'", "'>='", 
                     "'>'", "'as'", "'import'", "'*'", "'from'", "'{'", 
                     "','", "'}'", "'contract'", "'interface'", "'library'", 
                     "'is'", "'('", "')'", "'='", "'using'", "'for'", "'struct'", 
                     "'modifier'", "'function'", "'constructor'", "'returns'", 
                     "'event'", "'enum'", "'['", "']'", "'.'", "'mapping'", 
                     "'=>'", "'memory'", "'storage'", "'address'", "'string'", 
                     "'var'", "'bool'", "'if'", "'else'", "'while'", "'do'", 
                     "'_'", "'continue'", "'break'", "'return'", "'throw'", 
                     "'++'", "'--'", "'new'", "'emit'", "'+'", "'-'", "'after'", 
                     "'delete'", "'!'", "'~'", "'**'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'=='", "'!='", "'&&'", "'||'", 
                     "'?'", "':'", "'|='", "'^='", "'&='", "'<<='", "'>>='", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'assembly'", 
                     "'errorLabel'", "'bytecodeSize'", "'let'", "':='", 
                     "'=:'", "'->'", "'case'", "'switch'", "'default'", 
                     "'dataSize'", "'linkerSymbol'", null, null, null, null, 
                     null, null, null, null, null, null, null, null, "'anonymous'", 
                     "'constant'", "'pure'", "'public'", "'view'", "'internal'", 
                     "'external'", "'indexed'", "'private'", "'payable'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, "Int", "Uint", 
                      "Byte", "Fixed", "Ufixed", "VersionLiteral", "BooleanLiteral", 
                      "DecimalNumber", "HexNumber", "HexLiteral", "NumberUnit", 
                      "ReservedWords", "Anonymous", "Constant", "Pure", 
                      "Public", "View", "Internal", "External", "Indexed", 
                      "Private", "Payable", "StringLiteral", "Identifier", 
                      "COMMENT", "LINE_COMMENT", "WS" ];

var ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "contractDefinition", "inheritanceSpecifier", 
                   "contractPart", "stateVariableDeclaration", "usingForDeclaration", 
                   "structDefinition", "structVariableDeclaration", "modifierDefinition", 
                   "modifierInvocation", "functionDefinition", "constructorDefinition", 
                   "returnParameters", "eventDefinition", "enumValue", "enumDefinition", 
                   "modifierList", "stateMutability", "indexedParameterList", 
                   "indexedParameter", "parameterList", "parameter", "typeNameList", 
                   "unnamedParameter", "variableDeclaration", "typeName", 
                   "userDefinedTypeName", "mapping", "functionTypeName", 
                   "storageLocation", "elementaryTypeName", "block", "statement", 
                   "expressionStatement", "ifStatement", "whileStatement", 
                   "simpleStatement", "forStatement", "doWhileStatement", 
                   "placeholderStatement", "continueStatement", "breakStatement", 
                   "returnStatement", "throwStatement", "variableDeclarationStatement", 
                   "identifierList", "expression", "primaryExpression", 
                   "expressionList", "nameValueList", "nameValue", "functionCallArguments", 
                   "tupleExpression", "elementaryTypeNameExpression", "inlineAssemblyStatement", 
                   "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", 
                   "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyRightAssignment", "labelDefinition", "assemblyFunctionDefinition", 
                   "assemblyCase", "assemblyFor", "assemblySwitch", "assemblyLiteral", 
                   "subAssembly", "dataSize", "linkerSymbol", "numberLiteral", 
                   "identifier" ];

function SolidityParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SolidityParser.prototype = Object.create(antlr4.Parser.prototype);
SolidityParser.prototype.constructor = SolidityParser;

Object.defineProperty(SolidityParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SolidityParser.EOF = antlr4.Token.EOF;
SolidityParser.T__0 = 1;
SolidityParser.T__1 = 2;
SolidityParser.T__2 = 3;
SolidityParser.T__3 = 4;
SolidityParser.T__4 = 5;
SolidityParser.T__5 = 6;
SolidityParser.T__6 = 7;
SolidityParser.T__7 = 8;
SolidityParser.T__8 = 9;
SolidityParser.T__9 = 10;
SolidityParser.T__10 = 11;
SolidityParser.T__11 = 12;
SolidityParser.T__12 = 13;
SolidityParser.T__13 = 14;
SolidityParser.T__14 = 15;
SolidityParser.T__15 = 16;
SolidityParser.T__16 = 17;
SolidityParser.T__17 = 18;
SolidityParser.T__18 = 19;
SolidityParser.T__19 = 20;
SolidityParser.T__20 = 21;
SolidityParser.T__21 = 22;
SolidityParser.T__22 = 23;
SolidityParser.T__23 = 24;
SolidityParser.T__24 = 25;
SolidityParser.T__25 = 26;
SolidityParser.T__26 = 27;
SolidityParser.T__27 = 28;
SolidityParser.T__28 = 29;
SolidityParser.T__29 = 30;
SolidityParser.T__30 = 31;
SolidityParser.T__31 = 32;
SolidityParser.T__32 = 33;
SolidityParser.T__33 = 34;
SolidityParser.T__34 = 35;
SolidityParser.T__35 = 36;
SolidityParser.T__36 = 37;
SolidityParser.T__37 = 38;
SolidityParser.T__38 = 39;
SolidityParser.T__39 = 40;
SolidityParser.T__40 = 41;
SolidityParser.T__41 = 42;
SolidityParser.T__42 = 43;
SolidityParser.T__43 = 44;
SolidityParser.T__44 = 45;
SolidityParser.T__45 = 46;
SolidityParser.T__46 = 47;
SolidityParser.T__47 = 48;
SolidityParser.T__48 = 49;
SolidityParser.T__49 = 50;
SolidityParser.T__50 = 51;
SolidityParser.T__51 = 52;
SolidityParser.T__52 = 53;
SolidityParser.T__53 = 54;
SolidityParser.T__54 = 55;
SolidityParser.T__55 = 56;
SolidityParser.T__56 = 57;
SolidityParser.T__57 = 58;
SolidityParser.T__58 = 59;
SolidityParser.T__59 = 60;
SolidityParser.T__60 = 61;
SolidityParser.T__61 = 62;
SolidityParser.T__62 = 63;
SolidityParser.T__63 = 64;
SolidityParser.T__64 = 65;
SolidityParser.T__65 = 66;
SolidityParser.T__66 = 67;
SolidityParser.T__67 = 68;
SolidityParser.T__68 = 69;
SolidityParser.T__69 = 70;
SolidityParser.T__70 = 71;
SolidityParser.T__71 = 72;
SolidityParser.T__72 = 73;
SolidityParser.T__73 = 74;
SolidityParser.T__74 = 75;
SolidityParser.T__75 = 76;
SolidityParser.T__76 = 77;
SolidityParser.T__77 = 78;
SolidityParser.T__78 = 79;
SolidityParser.T__79 = 80;
SolidityParser.T__80 = 81;
SolidityParser.T__81 = 82;
SolidityParser.T__82 = 83;
SolidityParser.T__83 = 84;
SolidityParser.T__84 = 85;
SolidityParser.T__85 = 86;
SolidityParser.T__86 = 87;
SolidityParser.T__87 = 88;
SolidityParser.T__88 = 89;
SolidityParser.T__89 = 90;
SolidityParser.T__90 = 91;
SolidityParser.T__91 = 92;
SolidityParser.T__92 = 93;
SolidityParser.T__93 = 94;
SolidityParser.T__94 = 95;
SolidityParser.Int = 96;
SolidityParser.Uint = 97;
SolidityParser.Byte = 98;
SolidityParser.Fixed = 99;
SolidityParser.Ufixed = 100;
SolidityParser.VersionLiteral = 101;
SolidityParser.BooleanLiteral = 102;
SolidityParser.DecimalNumber = 103;
SolidityParser.HexNumber = 104;
SolidityParser.HexLiteral = 105;
SolidityParser.NumberUnit = 106;
SolidityParser.ReservedWords = 107;
SolidityParser.Anonymous = 108;
SolidityParser.Constant = 109;
SolidityParser.Pure = 110;
SolidityParser.Public = 111;
SolidityParser.View = 112;
SolidityParser.Internal = 113;
SolidityParser.External = 114;
SolidityParser.Indexed = 115;
SolidityParser.Private = 116;
SolidityParser.Payable = 117;
SolidityParser.StringLiteral = 118;
SolidityParser.Identifier = 119;
SolidityParser.COMMENT = 120;
SolidityParser.LINE_COMMENT = 121;
SolidityParser.WS = 122;

SolidityParser.RULE_sourceUnit = 0;
SolidityParser.RULE_pragmaDirective = 1;
SolidityParser.RULE_pragmaName = 2;
SolidityParser.RULE_pragmaValue = 3;
SolidityParser.RULE_version = 4;
SolidityParser.RULE_versionOperator = 5;
SolidityParser.RULE_versionConstraint = 6;
SolidityParser.RULE_importDeclaration = 7;
SolidityParser.RULE_importDirective = 8;
SolidityParser.RULE_contractDefinition = 9;
SolidityParser.RULE_inheritanceSpecifier = 10;
SolidityParser.RULE_contractPart = 11;
SolidityParser.RULE_stateVariableDeclaration = 12;
SolidityParser.RULE_usingForDeclaration = 13;
SolidityParser.RULE_structDefinition = 14;
SolidityParser.RULE_structVariableDeclaration = 15;
SolidityParser.RULE_modifierDefinition = 16;
SolidityParser.RULE_modifierInvocation = 17;
SolidityParser.RULE_functionDefinition = 18;
SolidityParser.RULE_constructorDefinition = 19;
SolidityParser.RULE_returnParameters = 20;
SolidityParser.RULE_eventDefinition = 21;
SolidityParser.RULE_enumValue = 22;
SolidityParser.RULE_enumDefinition = 23;
SolidityParser.RULE_modifierList = 24;
SolidityParser.RULE_stateMutability = 25;
SolidityParser.RULE_indexedParameterList = 26;
SolidityParser.RULE_indexedParameter = 27;
SolidityParser.RULE_parameterList = 28;
SolidityParser.RULE_parameter = 29;
SolidityParser.RULE_typeNameList = 30;
SolidityParser.RULE_unnamedParameter = 31;
SolidityParser.RULE_variableDeclaration = 32;
SolidityParser.RULE_typeName = 33;
SolidityParser.RULE_userDefinedTypeName = 34;
SolidityParser.RULE_mapping = 35;
SolidityParser.RULE_functionTypeName = 36;
SolidityParser.RULE_storageLocation = 37;
SolidityParser.RULE_elementaryTypeName = 38;
SolidityParser.RULE_block = 39;
SolidityParser.RULE_statement = 40;
SolidityParser.RULE_expressionStatement = 41;
SolidityParser.RULE_ifStatement = 42;
SolidityParser.RULE_whileStatement = 43;
SolidityParser.RULE_simpleStatement = 44;
SolidityParser.RULE_forStatement = 45;
SolidityParser.RULE_doWhileStatement = 46;
SolidityParser.RULE_placeholderStatement = 47;
SolidityParser.RULE_continueStatement = 48;
SolidityParser.RULE_breakStatement = 49;
SolidityParser.RULE_returnStatement = 50;
SolidityParser.RULE_throwStatement = 51;
SolidityParser.RULE_variableDeclarationStatement = 52;
SolidityParser.RULE_identifierList = 53;
SolidityParser.RULE_expression = 54;
SolidityParser.RULE_primaryExpression = 55;
SolidityParser.RULE_expressionList = 56;
SolidityParser.RULE_nameValueList = 57;
SolidityParser.RULE_nameValue = 58;
SolidityParser.RULE_functionCallArguments = 59;
SolidityParser.RULE_tupleExpression = 60;
SolidityParser.RULE_elementaryTypeNameExpression = 61;
SolidityParser.RULE_inlineAssemblyStatement = 62;
SolidityParser.RULE_assemblyBlock = 63;
SolidityParser.RULE_assemblyItem = 64;
SolidityParser.RULE_assemblyExpression = 65;
SolidityParser.RULE_assemblyCall = 66;
SolidityParser.RULE_assemblyLocalDefinition = 67;
SolidityParser.RULE_assemblyAssignment = 68;
SolidityParser.RULE_assemblyIdentifierOrList = 69;
SolidityParser.RULE_assemblyIdentifierList = 70;
SolidityParser.RULE_assemblyRightAssignment = 71;
SolidityParser.RULE_labelDefinition = 72;
SolidityParser.RULE_assemblyFunctionDefinition = 73;
SolidityParser.RULE_assemblyCase = 74;
SolidityParser.RULE_assemblyFor = 75;
SolidityParser.RULE_assemblySwitch = 76;
SolidityParser.RULE_assemblyLiteral = 77;
SolidityParser.RULE_subAssembly = 78;
SolidityParser.RULE_dataSize = 79;
SolidityParser.RULE_linkerSymbol = 80;
SolidityParser.RULE_numberLiteral = 81;
SolidityParser.RULE_identifier = 82;

function SourceUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_sourceUnit;
    return this;
}

SourceUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceUnitContext.prototype.constructor = SourceUnitContext;

SourceUnitContext.prototype.EOF = function() {
    return this.getToken(SolidityParser.EOF, 0);
};

SourceUnitContext.prototype.pragmaDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PragmaDirectiveContext);
    } else {
        return this.getTypedRuleContext(PragmaDirectiveContext,i);
    }
};

SourceUnitContext.prototype.importDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportDirectiveContext);
    } else {
        return this.getTypedRuleContext(ImportDirectiveContext,i);
    }
};

SourceUnitContext.prototype.contractDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ContractDefinitionContext);
    } else {
        return this.getTypedRuleContext(ContractDefinitionContext,i);
    }
};

SourceUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterSourceUnit(this);
	}
};

SourceUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitSourceUnit(this);
	}
};




SolidityParser.SourceUnitContext = SourceUnitContext;

SolidityParser.prototype.sourceUnit = function() {

    var localctx = new SourceUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SolidityParser.RULE_sourceUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 171;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__0) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__14) | (1 << SolidityParser.T__15) | (1 << SolidityParser.T__16))) !== 0)) {
            this.state = 169;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SolidityParser.T__0:
                this.state = 166;
                this.pragmaDirective();
                break;
            case SolidityParser.T__8:
                this.state = 167;
                this.importDirective();
                break;
            case SolidityParser.T__14:
            case SolidityParser.T__15:
            case SolidityParser.T__16:
                this.state = 168;
                this.contractDefinition();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 173;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 174;
        this.match(SolidityParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PragmaDirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_pragmaDirective;
    return this;
}

PragmaDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PragmaDirectiveContext.prototype.constructor = PragmaDirectiveContext;

PragmaDirectiveContext.prototype.pragmaName = function() {
    return this.getTypedRuleContext(PragmaNameContext,0);
};

PragmaDirectiveContext.prototype.pragmaValue = function() {
    return this.getTypedRuleContext(PragmaValueContext,0);
};

PragmaDirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterPragmaDirective(this);
	}
};

PragmaDirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitPragmaDirective(this);
	}
};




SolidityParser.PragmaDirectiveContext = PragmaDirectiveContext;

SolidityParser.prototype.pragmaDirective = function() {

    var localctx = new PragmaDirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SolidityParser.RULE_pragmaDirective);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 176;
        this.match(SolidityParser.T__0);
        this.state = 177;
        this.pragmaName();
        this.state = 178;
        this.pragmaValue();
        this.state = 179;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PragmaNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_pragmaName;
    return this;
}

PragmaNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PragmaNameContext.prototype.constructor = PragmaNameContext;

PragmaNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PragmaNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterPragmaName(this);
	}
};

PragmaNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitPragmaName(this);
	}
};




SolidityParser.PragmaNameContext = PragmaNameContext;

SolidityParser.prototype.pragmaName = function() {

    var localctx = new PragmaNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SolidityParser.RULE_pragmaName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 181;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PragmaValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_pragmaValue;
    return this;
}

PragmaValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PragmaValueContext.prototype.constructor = PragmaValueContext;

PragmaValueContext.prototype.version = function() {
    return this.getTypedRuleContext(VersionContext,0);
};

PragmaValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PragmaValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterPragmaValue(this);
	}
};

PragmaValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitPragmaValue(this);
	}
};




SolidityParser.PragmaValueContext = PragmaValueContext;

SolidityParser.prototype.pragmaValue = function() {

    var localctx = new PragmaValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SolidityParser.RULE_pragmaValue);
    try {
        this.state = 185;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__2:
        case SolidityParser.T__3:
        case SolidityParser.T__4:
        case SolidityParser.T__5:
        case SolidityParser.T__6:
        case SolidityParser.VersionLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 183;
            this.version();
            break;
        case SolidityParser.T__10:
        case SolidityParser.T__18:
        case SolidityParser.T__30:
        case SolidityParser.T__37:
        case SolidityParser.T__38:
        case SolidityParser.T__39:
        case SolidityParser.T__40:
        case SolidityParser.T__50:
        case SolidityParser.T__51:
        case SolidityParser.T__52:
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.T__57:
        case SolidityParser.T__58:
        case SolidityParser.T__59:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.BooleanLiteral:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.StringLiteral:
        case SolidityParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 184;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VersionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_version;
    return this;
}

VersionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionContext.prototype.constructor = VersionContext;

VersionContext.prototype.versionConstraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VersionConstraintContext);
    } else {
        return this.getTypedRuleContext(VersionConstraintContext,i);
    }
};

VersionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterVersion(this);
	}
};

VersionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitVersion(this);
	}
};




SolidityParser.VersionContext = VersionContext;

SolidityParser.prototype.version = function() {

    var localctx = new VersionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SolidityParser.RULE_version);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 187;
        this.versionConstraint();
        this.state = 189;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6))) !== 0) || _la===SolidityParser.VersionLiteral) {
            this.state = 188;
            this.versionConstraint();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VersionOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_versionOperator;
    return this;
}

VersionOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionOperatorContext.prototype.constructor = VersionOperatorContext;


VersionOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterVersionOperator(this);
	}
};

VersionOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitVersionOperator(this);
	}
};




SolidityParser.VersionOperatorContext = VersionOperatorContext;

SolidityParser.prototype.versionOperator = function() {

    var localctx = new VersionOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SolidityParser.RULE_versionOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 191;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VersionConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_versionConstraint;
    return this;
}

VersionConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionConstraintContext.prototype.constructor = VersionConstraintContext;

VersionConstraintContext.prototype.VersionLiteral = function() {
    return this.getToken(SolidityParser.VersionLiteral, 0);
};

VersionConstraintContext.prototype.versionOperator = function() {
    return this.getTypedRuleContext(VersionOperatorContext,0);
};

VersionConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterVersionConstraint(this);
	}
};

VersionConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitVersionConstraint(this);
	}
};




SolidityParser.VersionConstraintContext = VersionConstraintContext;

SolidityParser.prototype.versionConstraint = function() {

    var localctx = new VersionConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SolidityParser.RULE_versionConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 194;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6))) !== 0)) {
            this.state = 193;
            this.versionOperator();
        }

        this.state = 196;
        this.match(SolidityParser.VersionLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_importDeclaration;
    return this;
}

ImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclarationContext.prototype.constructor = ImportDeclarationContext;

ImportDeclarationContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ImportDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterImportDeclaration(this);
	}
};

ImportDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitImportDeclaration(this);
	}
};




SolidityParser.ImportDeclarationContext = ImportDeclarationContext;

SolidityParser.prototype.importDeclaration = function() {

    var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SolidityParser.RULE_importDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 198;
        this.identifier();
        this.state = 201;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__7) {
            this.state = 199;
            this.match(SolidityParser.T__7);
            this.state = 200;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_importDirective;
    return this;
}

ImportDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDirectiveContext.prototype.constructor = ImportDirectiveContext;

ImportDirectiveContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

ImportDirectiveContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ImportDirectiveContext.prototype.importDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportDeclarationContext);
    } else {
        return this.getTypedRuleContext(ImportDeclarationContext,i);
    }
};

ImportDirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterImportDirective(this);
	}
};

ImportDirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitImportDirective(this);
	}
};




SolidityParser.ImportDirectiveContext = ImportDirectiveContext;

SolidityParser.prototype.importDirective = function() {

    var localctx = new ImportDirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SolidityParser.RULE_importDirective);
    var _la = 0; // Token type
    try {
        this.state = 237;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 203;
            this.match(SolidityParser.T__8);
            this.state = 204;
            this.match(SolidityParser.StringLiteral);
            this.state = 207;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.T__7) {
                this.state = 205;
                this.match(SolidityParser.T__7);
                this.state = 206;
                this.identifier();
            }

            this.state = 209;
            this.match(SolidityParser.T__1);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 210;
            this.match(SolidityParser.T__8);
            this.state = 213;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SolidityParser.T__9:
                this.state = 211;
                this.match(SolidityParser.T__9);
                break;
            case SolidityParser.T__10:
            case SolidityParser.Identifier:
                this.state = 212;
                this.identifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 217;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.T__7) {
                this.state = 215;
                this.match(SolidityParser.T__7);
                this.state = 216;
                this.identifier();
            }

            this.state = 219;
            this.match(SolidityParser.T__10);
            this.state = 220;
            this.match(SolidityParser.StringLiteral);
            this.state = 221;
            this.match(SolidityParser.T__1);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 222;
            this.match(SolidityParser.T__8);
            this.state = 223;
            this.match(SolidityParser.T__11);
            this.state = 224;
            this.importDeclaration();
            this.state = 229;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 225;
                this.match(SolidityParser.T__12);
                this.state = 226;
                this.importDeclaration();
                this.state = 231;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 232;
            this.match(SolidityParser.T__13);
            this.state = 233;
            this.match(SolidityParser.T__10);
            this.state = 234;
            this.match(SolidityParser.StringLiteral);
            this.state = 235;
            this.match(SolidityParser.T__1);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContractDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_contractDefinition;
    return this;
}

ContractDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContractDefinitionContext.prototype.constructor = ContractDefinitionContext;

ContractDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ContractDefinitionContext.prototype.inheritanceSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InheritanceSpecifierContext);
    } else {
        return this.getTypedRuleContext(InheritanceSpecifierContext,i);
    }
};

ContractDefinitionContext.prototype.contractPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ContractPartContext);
    } else {
        return this.getTypedRuleContext(ContractPartContext,i);
    }
};

ContractDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterContractDefinition(this);
	}
};

ContractDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitContractDefinition(this);
	}
};




SolidityParser.ContractDefinitionContext = ContractDefinitionContext;

SolidityParser.prototype.contractDefinition = function() {

    var localctx = new ContractDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SolidityParser.RULE_contractDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 239;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__14) | (1 << SolidityParser.T__15) | (1 << SolidityParser.T__16))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 240;
        this.identifier();
        this.state = 250;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__17) {
            this.state = 241;
            this.match(SolidityParser.T__17);
            this.state = 242;
            this.inheritanceSpecifier();
            this.state = 247;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 243;
                this.match(SolidityParser.T__12);
                this.state = 244;
                this.inheritanceSpecifier();
                this.state = 249;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 252;
        this.match(SolidityParser.T__11);
        this.state = 256;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (SolidityParser.T__10 - 11)) | (1 << (SolidityParser.T__21 - 11)) | (1 << (SolidityParser.T__23 - 11)) | (1 << (SolidityParser.T__24 - 11)) | (1 << (SolidityParser.T__25 - 11)) | (1 << (SolidityParser.T__26 - 11)) | (1 << (SolidityParser.T__28 - 11)) | (1 << (SolidityParser.T__29 - 11)) | (1 << (SolidityParser.T__33 - 11)) | (1 << (SolidityParser.T__37 - 11)) | (1 << (SolidityParser.T__38 - 11)) | (1 << (SolidityParser.T__39 - 11)) | (1 << (SolidityParser.T__40 - 11)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.Identifier - 96)))) !== 0)) {
            this.state = 253;
            this.contractPart();
            this.state = 258;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 259;
        this.match(SolidityParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InheritanceSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_inheritanceSpecifier;
    return this;
}

InheritanceSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InheritanceSpecifierContext.prototype.constructor = InheritanceSpecifierContext;

InheritanceSpecifierContext.prototype.userDefinedTypeName = function() {
    return this.getTypedRuleContext(UserDefinedTypeNameContext,0);
};

InheritanceSpecifierContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InheritanceSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterInheritanceSpecifier(this);
	}
};

InheritanceSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitInheritanceSpecifier(this);
	}
};




SolidityParser.InheritanceSpecifierContext = InheritanceSpecifierContext;

SolidityParser.prototype.inheritanceSpecifier = function() {

    var localctx = new InheritanceSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SolidityParser.RULE_inheritanceSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 261;
        this.userDefinedTypeName();
        this.state = 273;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__18) {
            this.state = 262;
            this.match(SolidityParser.T__18);
            this.state = 263;
            this.expression(0);
            this.state = 268;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 264;
                this.match(SolidityParser.T__12);
                this.state = 265;
                this.expression(0);
                this.state = 270;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 271;
            this.match(SolidityParser.T__19);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContractPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_contractPart;
    return this;
}

ContractPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContractPartContext.prototype.constructor = ContractPartContext;

ContractPartContext.prototype.stateVariableDeclaration = function() {
    return this.getTypedRuleContext(StateVariableDeclarationContext,0);
};

ContractPartContext.prototype.usingForDeclaration = function() {
    return this.getTypedRuleContext(UsingForDeclarationContext,0);
};

ContractPartContext.prototype.structDefinition = function() {
    return this.getTypedRuleContext(StructDefinitionContext,0);
};

ContractPartContext.prototype.modifierDefinition = function() {
    return this.getTypedRuleContext(ModifierDefinitionContext,0);
};

ContractPartContext.prototype.functionDefinition = function() {
    return this.getTypedRuleContext(FunctionDefinitionContext,0);
};

ContractPartContext.prototype.constructorDefinition = function() {
    return this.getTypedRuleContext(ConstructorDefinitionContext,0);
};

ContractPartContext.prototype.eventDefinition = function() {
    return this.getTypedRuleContext(EventDefinitionContext,0);
};

ContractPartContext.prototype.enumDefinition = function() {
    return this.getTypedRuleContext(EnumDefinitionContext,0);
};

ContractPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterContractPart(this);
	}
};

ContractPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitContractPart(this);
	}
};




SolidityParser.ContractPartContext = ContractPartContext;

SolidityParser.prototype.contractPart = function() {

    var localctx = new ContractPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SolidityParser.RULE_contractPart);
    try {
        this.state = 283;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 275;
            this.stateVariableDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 276;
            this.usingForDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 277;
            this.structDefinition();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 278;
            this.modifierDefinition();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 279;
            this.functionDefinition();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 280;
            this.constructorDefinition();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 281;
            this.eventDefinition();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 282;
            this.enumDefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StateVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_stateVariableDeclaration;
    return this;
}

StateVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateVariableDeclarationContext.prototype.constructor = StateVariableDeclarationContext;

StateVariableDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

StateVariableDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

StateVariableDeclarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StateVariableDeclarationContext.prototype.Public = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Public);
    } else {
        return this.getToken(SolidityParser.Public, i);
    }
};


StateVariableDeclarationContext.prototype.Internal = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Internal);
    } else {
        return this.getToken(SolidityParser.Internal, i);
    }
};


StateVariableDeclarationContext.prototype.Private = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Private);
    } else {
        return this.getToken(SolidityParser.Private, i);
    }
};


StateVariableDeclarationContext.prototype.Constant = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Constant);
    } else {
        return this.getToken(SolidityParser.Constant, i);
    }
};


StateVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterStateVariableDeclaration(this);
	}
};

StateVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitStateVariableDeclaration(this);
	}
};




SolidityParser.StateVariableDeclarationContext = StateVariableDeclarationContext;

SolidityParser.prototype.stateVariableDeclaration = function() {

    var localctx = new StateVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SolidityParser.RULE_stateVariableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 285;
        this.typeName(0);
        this.state = 289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (SolidityParser.Constant - 109)) | (1 << (SolidityParser.Public - 109)) | (1 << (SolidityParser.Internal - 109)) | (1 << (SolidityParser.Private - 109)))) !== 0)) {
            this.state = 286;
            _la = this._input.LA(1);
            if(!(((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (SolidityParser.Constant - 109)) | (1 << (SolidityParser.Public - 109)) | (1 << (SolidityParser.Internal - 109)) | (1 << (SolidityParser.Private - 109)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 291;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 292;
        this.identifier();
        this.state = 295;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__20) {
            this.state = 293;
            this.match(SolidityParser.T__20);
            this.state = 294;
            this.expression(0);
        }

        this.state = 297;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UsingForDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_usingForDeclaration;
    return this;
}

UsingForDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingForDeclarationContext.prototype.constructor = UsingForDeclarationContext;

UsingForDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

UsingForDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

UsingForDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterUsingForDeclaration(this);
	}
};

UsingForDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitUsingForDeclaration(this);
	}
};




SolidityParser.UsingForDeclarationContext = UsingForDeclarationContext;

SolidityParser.prototype.usingForDeclaration = function() {

    var localctx = new UsingForDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SolidityParser.RULE_usingForDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 299;
        this.match(SolidityParser.T__21);
        this.state = 300;
        this.identifier();
        this.state = 301;
        this.match(SolidityParser.T__22);
        this.state = 304;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__9:
            this.state = 302;
            this.match(SolidityParser.T__9);
            break;
        case SolidityParser.T__10:
        case SolidityParser.T__25:
        case SolidityParser.T__33:
        case SolidityParser.T__37:
        case SolidityParser.T__38:
        case SolidityParser.T__39:
        case SolidityParser.T__40:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.Identifier:
            this.state = 303;
            this.typeName(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 306;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_structDefinition;
    return this;
}

StructDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDefinitionContext.prototype.constructor = StructDefinitionContext;

StructDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

StructDefinitionContext.prototype.structVariableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StructVariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(StructVariableDeclarationContext,i);
    }
};

StructDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterStructDefinition(this);
	}
};

StructDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitStructDefinition(this);
	}
};




SolidityParser.StructDefinitionContext = StructDefinitionContext;

SolidityParser.prototype.structDefinition = function() {

    var localctx = new StructDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SolidityParser.RULE_structDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 308;
        this.match(SolidityParser.T__23);
        this.state = 309;
        this.identifier();
        this.state = 310;
        this.match(SolidityParser.T__11);
        this.state = 318;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (SolidityParser.T__10 - 11)) | (1 << (SolidityParser.T__25 - 11)) | (1 << (SolidityParser.T__33 - 11)) | (1 << (SolidityParser.T__37 - 11)) | (1 << (SolidityParser.T__38 - 11)) | (1 << (SolidityParser.T__39 - 11)) | (1 << (SolidityParser.T__40 - 11)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.Identifier - 96)))) !== 0)) {
            this.state = 311;
            this.structVariableDeclaration();
            this.state = 315;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (SolidityParser.T__10 - 11)) | (1 << (SolidityParser.T__25 - 11)) | (1 << (SolidityParser.T__33 - 11)) | (1 << (SolidityParser.T__37 - 11)) | (1 << (SolidityParser.T__38 - 11)) | (1 << (SolidityParser.T__39 - 11)) | (1 << (SolidityParser.T__40 - 11)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.Identifier - 96)))) !== 0)) {
                this.state = 312;
                this.structVariableDeclaration();
                this.state = 317;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 320;
        this.match(SolidityParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_structVariableDeclaration;
    return this;
}

StructVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructVariableDeclarationContext.prototype.constructor = StructVariableDeclarationContext;

StructVariableDeclarationContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

StructVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterStructVariableDeclaration(this);
	}
};

StructVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitStructVariableDeclaration(this);
	}
};




SolidityParser.StructVariableDeclarationContext = StructVariableDeclarationContext;

SolidityParser.prototype.structVariableDeclaration = function() {

    var localctx = new StructVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SolidityParser.RULE_structVariableDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 322;
        this.variableDeclaration();
        this.state = 323;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_modifierDefinition;
    return this;
}

ModifierDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierDefinitionContext.prototype.constructor = ModifierDefinitionContext;

ModifierDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ModifierDefinitionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ModifierDefinitionContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ModifierDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterModifierDefinition(this);
	}
};

ModifierDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitModifierDefinition(this);
	}
};




SolidityParser.ModifierDefinitionContext = ModifierDefinitionContext;

SolidityParser.prototype.modifierDefinition = function() {

    var localctx = new ModifierDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SolidityParser.RULE_modifierDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 325;
        this.match(SolidityParser.T__24);
        this.state = 326;
        this.identifier();
        this.state = 328;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__18) {
            this.state = 327;
            this.parameterList();
        }

        this.state = 330;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_modifierInvocation;
    return this;
}

ModifierInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierInvocationContext.prototype.constructor = ModifierInvocationContext;

ModifierInvocationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ModifierInvocationContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ModifierInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterModifierInvocation(this);
	}
};

ModifierInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitModifierInvocation(this);
	}
};




SolidityParser.ModifierInvocationContext = ModifierInvocationContext;

SolidityParser.prototype.modifierInvocation = function() {

    var localctx = new ModifierInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SolidityParser.RULE_modifierInvocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 332;
        this.identifier();
        this.state = 338;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__18) {
            this.state = 333;
            this.match(SolidityParser.T__18);
            this.state = 335;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__30))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__38 - 38)) | (1 << (SolidityParser.T__39 - 38)) | (1 << (SolidityParser.T__40 - 38)) | (1 << (SolidityParser.T__50 - 38)) | (1 << (SolidityParser.T__51 - 38)) | (1 << (SolidityParser.T__52 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteral - 96)) | (1 << (SolidityParser.StringLiteral - 96)) | (1 << (SolidityParser.Identifier - 96)))) !== 0)) {
                this.state = 334;
                this.expressionList();
            }

            this.state = 337;
            this.match(SolidityParser.T__19);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionDefinition;
    return this;
}

FunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDefinitionContext.prototype.constructor = FunctionDefinitionContext;

FunctionDefinitionContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

FunctionDefinitionContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

FunctionDefinitionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FunctionDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionDefinitionContext.prototype.returnParameters = function() {
    return this.getTypedRuleContext(ReturnParametersContext,0);
};

FunctionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterFunctionDefinition(this);
	}
};

FunctionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitFunctionDefinition(this);
	}
};




SolidityParser.FunctionDefinitionContext = FunctionDefinitionContext;

SolidityParser.prototype.functionDefinition = function() {

    var localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SolidityParser.RULE_functionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 340;
        this.match(SolidityParser.T__25);
        this.state = 342;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier) {
            this.state = 341;
            this.identifier();
        }

        this.state = 344;
        this.parameterList();
        this.state = 345;
        this.modifierList();
        this.state = 347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__27) {
            this.state = 346;
            this.returnParameters();
        }

        this.state = 351;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__1:
            this.state = 349;
            this.match(SolidityParser.T__1);
            break;
        case SolidityParser.T__11:
            this.state = 350;
            this.block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_constructorDefinition;
    return this;
}

ConstructorDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorDefinitionContext.prototype.constructor = ConstructorDefinitionContext;

ConstructorDefinitionContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ConstructorDefinitionContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

ConstructorDefinitionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ConstructorDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterConstructorDefinition(this);
	}
};

ConstructorDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitConstructorDefinition(this);
	}
};




SolidityParser.ConstructorDefinitionContext = ConstructorDefinitionContext;

SolidityParser.prototype.constructorDefinition = function() {

    var localctx = new ConstructorDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SolidityParser.RULE_constructorDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 353;
        this.match(SolidityParser.T__26);
        this.state = 354;
        this.parameterList();
        this.state = 355;
        this.modifierList();
        this.state = 356;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_returnParameters;
    return this;
}

ReturnParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnParametersContext.prototype.constructor = ReturnParametersContext;

ReturnParametersContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ReturnParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterReturnParameters(this);
	}
};

ReturnParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitReturnParameters(this);
	}
};




SolidityParser.ReturnParametersContext = ReturnParametersContext;

SolidityParser.prototype.returnParameters = function() {

    var localctx = new ReturnParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SolidityParser.RULE_returnParameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 358;
        this.match(SolidityParser.T__27);
        this.state = 359;
        this.parameterList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_eventDefinition;
    return this;
}

EventDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventDefinitionContext.prototype.constructor = EventDefinitionContext;

EventDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

EventDefinitionContext.prototype.indexedParameterList = function() {
    return this.getTypedRuleContext(IndexedParameterListContext,0);
};

EventDefinitionContext.prototype.Anonymous = function() {
    return this.getToken(SolidityParser.Anonymous, 0);
};

EventDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterEventDefinition(this);
	}
};

EventDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitEventDefinition(this);
	}
};




SolidityParser.EventDefinitionContext = EventDefinitionContext;

SolidityParser.prototype.eventDefinition = function() {

    var localctx = new EventDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SolidityParser.RULE_eventDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 361;
        this.match(SolidityParser.T__28);
        this.state = 362;
        this.identifier();
        this.state = 363;
        this.indexedParameterList();
        this.state = 365;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Anonymous) {
            this.state = 364;
            this.match(SolidityParser.Anonymous);
        }

        this.state = 367;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_enumValue;
    return this;
}

EnumValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumValueContext.prototype.constructor = EnumValueContext;

EnumValueContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

EnumValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterEnumValue(this);
	}
};

EnumValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitEnumValue(this);
	}
};




SolidityParser.EnumValueContext = EnumValueContext;

SolidityParser.prototype.enumValue = function() {

    var localctx = new EnumValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SolidityParser.RULE_enumValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 369;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_enumDefinition;
    return this;
}

EnumDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDefinitionContext.prototype.constructor = EnumDefinitionContext;

EnumDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

EnumDefinitionContext.prototype.enumValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumValueContext);
    } else {
        return this.getTypedRuleContext(EnumValueContext,i);
    }
};

EnumDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterEnumDefinition(this);
	}
};

EnumDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitEnumDefinition(this);
	}
};




SolidityParser.EnumDefinitionContext = EnumDefinitionContext;

SolidityParser.prototype.enumDefinition = function() {

    var localctx = new EnumDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SolidityParser.RULE_enumDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 371;
        this.match(SolidityParser.T__29);
        this.state = 372;
        this.identifier();
        this.state = 373;
        this.match(SolidityParser.T__11);
        this.state = 375;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier) {
            this.state = 374;
            this.enumValue();
        }

        this.state = 381;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__12) {
            this.state = 377;
            this.match(SolidityParser.T__12);
            this.state = 378;
            this.enumValue();
            this.state = 383;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 384;
        this.match(SolidityParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_modifierList;
    return this;
}

ModifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierListContext.prototype.constructor = ModifierListContext;

ModifierListContext.prototype.modifierInvocation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierInvocationContext);
    } else {
        return this.getTypedRuleContext(ModifierInvocationContext,i);
    }
};

ModifierListContext.prototype.stateMutability = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StateMutabilityContext);
    } else {
        return this.getTypedRuleContext(StateMutabilityContext,i);
    }
};

ModifierListContext.prototype.External = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.External);
    } else {
        return this.getToken(SolidityParser.External, i);
    }
};


ModifierListContext.prototype.Public = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Public);
    } else {
        return this.getToken(SolidityParser.Public, i);
    }
};


ModifierListContext.prototype.Internal = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Internal);
    } else {
        return this.getToken(SolidityParser.Internal, i);
    }
};


ModifierListContext.prototype.Private = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Private);
    } else {
        return this.getToken(SolidityParser.Private, i);
    }
};


ModifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterModifierList(this);
	}
};

ModifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitModifierList(this);
	}
};




SolidityParser.ModifierListContext = ModifierListContext;

SolidityParser.prototype.modifierList = function() {

    var localctx = new ModifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SolidityParser.RULE_modifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 394;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__10 || ((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (SolidityParser.Constant - 109)) | (1 << (SolidityParser.Pure - 109)) | (1 << (SolidityParser.Public - 109)) | (1 << (SolidityParser.View - 109)) | (1 << (SolidityParser.Internal - 109)) | (1 << (SolidityParser.External - 109)) | (1 << (SolidityParser.Private - 109)) | (1 << (SolidityParser.Payable - 109)) | (1 << (SolidityParser.Identifier - 109)))) !== 0)) {
            this.state = 392;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SolidityParser.T__10:
            case SolidityParser.Identifier:
                this.state = 386;
                this.modifierInvocation();
                break;
            case SolidityParser.Constant:
            case SolidityParser.Pure:
            case SolidityParser.View:
            case SolidityParser.Payable:
                this.state = 387;
                this.stateMutability();
                break;
            case SolidityParser.External:
                this.state = 388;
                this.match(SolidityParser.External);
                break;
            case SolidityParser.Public:
                this.state = 389;
                this.match(SolidityParser.Public);
                break;
            case SolidityParser.Internal:
                this.state = 390;
                this.match(SolidityParser.Internal);
                break;
            case SolidityParser.Private:
                this.state = 391;
                this.match(SolidityParser.Private);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 396;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StateMutabilityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_stateMutability;
    return this;
}

StateMutabilityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateMutabilityContext.prototype.constructor = StateMutabilityContext;

StateMutabilityContext.prototype.Pure = function() {
    return this.getToken(SolidityParser.Pure, 0);
};

StateMutabilityContext.prototype.Constant = function() {
    return this.getToken(SolidityParser.Constant, 0);
};

StateMutabilityContext.prototype.View = function() {
    return this.getToken(SolidityParser.View, 0);
};

StateMutabilityContext.prototype.Payable = function() {
    return this.getToken(SolidityParser.Payable, 0);
};

StateMutabilityContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterStateMutability(this);
	}
};

StateMutabilityContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitStateMutability(this);
	}
};




SolidityParser.StateMutabilityContext = StateMutabilityContext;

SolidityParser.prototype.stateMutability = function() {

    var localctx = new StateMutabilityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SolidityParser.RULE_stateMutability);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 397;
        _la = this._input.LA(1);
        if(!(((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (SolidityParser.Constant - 109)) | (1 << (SolidityParser.Pure - 109)) | (1 << (SolidityParser.View - 109)) | (1 << (SolidityParser.Payable - 109)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndexedParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_indexedParameterList;
    return this;
}

IndexedParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexedParameterListContext.prototype.constructor = IndexedParameterListContext;

IndexedParameterListContext.prototype.indexedParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexedParameterContext);
    } else {
        return this.getTypedRuleContext(IndexedParameterContext,i);
    }
};

IndexedParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterIndexedParameterList(this);
	}
};

IndexedParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitIndexedParameterList(this);
	}
};




SolidityParser.IndexedParameterListContext = IndexedParameterListContext;

SolidityParser.prototype.indexedParameterList = function() {

    var localctx = new IndexedParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SolidityParser.RULE_indexedParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 399;
        this.match(SolidityParser.T__18);
        this.state = 408;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (SolidityParser.T__10 - 11)) | (1 << (SolidityParser.T__25 - 11)) | (1 << (SolidityParser.T__33 - 11)) | (1 << (SolidityParser.T__37 - 11)) | (1 << (SolidityParser.T__38 - 11)) | (1 << (SolidityParser.T__39 - 11)) | (1 << (SolidityParser.T__40 - 11)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.Identifier - 96)))) !== 0)) {
            this.state = 400;
            this.indexedParameter();
            this.state = 405;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 401;
                this.match(SolidityParser.T__12);
                this.state = 402;
                this.indexedParameter();
                this.state = 407;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 410;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndexedParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_indexedParameter;
    return this;
}

IndexedParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexedParameterContext.prototype.constructor = IndexedParameterContext;

IndexedParameterContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

IndexedParameterContext.prototype.storageLocation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StorageLocationContext);
    } else {
        return this.getTypedRuleContext(StorageLocationContext,i);
    }
};

IndexedParameterContext.prototype.Indexed = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Indexed);
    } else {
        return this.getToken(SolidityParser.Indexed, i);
    }
};


IndexedParameterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IndexedParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterIndexedParameter(this);
	}
};

IndexedParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitIndexedParameter(this);
	}
};




SolidityParser.IndexedParameterContext = IndexedParameterContext;

SolidityParser.prototype.indexedParameter = function() {

    var localctx = new IndexedParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SolidityParser.RULE_indexedParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 412;
        this.typeName(0);
        this.state = 417;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__35 || _la===SolidityParser.T__36 || _la===SolidityParser.Indexed) {
            this.state = 415;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SolidityParser.T__35:
            case SolidityParser.T__36:
                this.state = 413;
                this.storageLocation();
                break;
            case SolidityParser.Indexed:
                this.state = 414;
                this.match(SolidityParser.Indexed);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 419;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 421;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier) {
            this.state = 420;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_parameterList;
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

ParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterParameterList(this);
	}
};

ParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitParameterList(this);
	}
};




SolidityParser.ParameterListContext = ParameterListContext;

SolidityParser.prototype.parameterList = function() {

    var localctx = new ParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SolidityParser.RULE_parameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 423;
        this.match(SolidityParser.T__18);
        this.state = 432;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (SolidityParser.T__10 - 11)) | (1 << (SolidityParser.T__25 - 11)) | (1 << (SolidityParser.T__33 - 11)) | (1 << (SolidityParser.T__37 - 11)) | (1 << (SolidityParser.T__38 - 11)) | (1 << (SolidityParser.T__39 - 11)) | (1 << (SolidityParser.T__40 - 11)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.Identifier - 96)))) !== 0)) {
            this.state = 424;
            this.parameter();
            this.state = 429;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 425;
                this.match(SolidityParser.T__12);
                this.state = 426;
                this.parameter();
                this.state = 431;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 434;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

ParameterContext.prototype.storageLocation = function() {
    return this.getTypedRuleContext(StorageLocationContext,0);
};

ParameterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitParameter(this);
	}
};




SolidityParser.ParameterContext = ParameterContext;

SolidityParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SolidityParser.RULE_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 436;
        this.typeName(0);
        this.state = 438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__35 || _la===SolidityParser.T__36) {
            this.state = 437;
            this.storageLocation();
        }

        this.state = 441;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier) {
            this.state = 440;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeNameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_typeNameList;
    return this;
}

TypeNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameListContext.prototype.constructor = TypeNameListContext;

TypeNameListContext.prototype.unnamedParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnnamedParameterContext);
    } else {
        return this.getTypedRuleContext(UnnamedParameterContext,i);
    }
};

TypeNameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterTypeNameList(this);
	}
};

TypeNameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitTypeNameList(this);
	}
};




SolidityParser.TypeNameListContext = TypeNameListContext;

SolidityParser.prototype.typeNameList = function() {

    var localctx = new TypeNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SolidityParser.RULE_typeNameList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 443;
        this.match(SolidityParser.T__18);
        this.state = 452;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (SolidityParser.T__10 - 11)) | (1 << (SolidityParser.T__25 - 11)) | (1 << (SolidityParser.T__33 - 11)) | (1 << (SolidityParser.T__37 - 11)) | (1 << (SolidityParser.T__38 - 11)) | (1 << (SolidityParser.T__39 - 11)) | (1 << (SolidityParser.T__40 - 11)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.Identifier - 96)))) !== 0)) {
            this.state = 444;
            this.unnamedParameter();
            this.state = 449;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 445;
                this.match(SolidityParser.T__12);
                this.state = 446;
                this.unnamedParameter();
                this.state = 451;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 454;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnnamedParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_unnamedParameter;
    return this;
}

UnnamedParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnnamedParameterContext.prototype.constructor = UnnamedParameterContext;

UnnamedParameterContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

UnnamedParameterContext.prototype.storageLocation = function() {
    return this.getTypedRuleContext(StorageLocationContext,0);
};

UnnamedParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterUnnamedParameter(this);
	}
};

UnnamedParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitUnnamedParameter(this);
	}
};




SolidityParser.UnnamedParameterContext = UnnamedParameterContext;

SolidityParser.prototype.unnamedParameter = function() {

    var localctx = new UnnamedParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SolidityParser.RULE_unnamedParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 456;
        this.typeName(0);
        this.state = 458;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__35 || _la===SolidityParser.T__36) {
            this.state = 457;
            this.storageLocation();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

VariableDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

VariableDeclarationContext.prototype.storageLocation = function() {
    return this.getTypedRuleContext(StorageLocationContext,0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitVariableDeclaration(this);
	}
};




SolidityParser.VariableDeclarationContext = VariableDeclarationContext;

SolidityParser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SolidityParser.RULE_variableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 460;
        this.typeName(0);
        this.state = 462;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__35 || _la===SolidityParser.T__36) {
            this.state = 461;
            this.storageLocation();
        }

        this.state = 464;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_typeName;
    return this;
}

TypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameContext.prototype.constructor = TypeNameContext;

TypeNameContext.prototype.elementaryTypeName = function() {
    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
};

TypeNameContext.prototype.userDefinedTypeName = function() {
    return this.getTypedRuleContext(UserDefinedTypeNameContext,0);
};

TypeNameContext.prototype.mapping = function() {
    return this.getTypedRuleContext(MappingContext,0);
};

TypeNameContext.prototype.functionTypeName = function() {
    return this.getTypedRuleContext(FunctionTypeNameContext,0);
};

TypeNameContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

TypeNameContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterTypeName(this);
	}
};

TypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitTypeName(this);
	}
};



SolidityParser.prototype.typeName = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeNameContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 66;
    this.enterRecursionRule(localctx, 66, SolidityParser.RULE_typeName, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 471;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__37:
        case SolidityParser.T__38:
        case SolidityParser.T__39:
        case SolidityParser.T__40:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
            this.state = 467;
            this.elementaryTypeName();
            break;
        case SolidityParser.T__10:
        case SolidityParser.Identifier:
            this.state = 468;
            this.userDefinedTypeName();
            break;
        case SolidityParser.T__33:
            this.state = 469;
            this.mapping();
            break;
        case SolidityParser.T__25:
            this.state = 470;
            this.functionTypeName();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 481;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeNameContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_typeName);
                this.state = 473;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 474;
                this.match(SolidityParser.T__30);
                this.state = 476;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__30))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__38 - 38)) | (1 << (SolidityParser.T__39 - 38)) | (1 << (SolidityParser.T__40 - 38)) | (1 << (SolidityParser.T__50 - 38)) | (1 << (SolidityParser.T__51 - 38)) | (1 << (SolidityParser.T__52 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteral - 96)) | (1 << (SolidityParser.StringLiteral - 96)) | (1 << (SolidityParser.Identifier - 96)))) !== 0)) {
                    this.state = 475;
                    this.expression(0);
                }

                this.state = 478;
                this.match(SolidityParser.T__31); 
            }
            this.state = 483;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function UserDefinedTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_userDefinedTypeName;
    return this;
}

UserDefinedTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserDefinedTypeNameContext.prototype.constructor = UserDefinedTypeNameContext;

UserDefinedTypeNameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

UserDefinedTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterUserDefinedTypeName(this);
	}
};

UserDefinedTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitUserDefinedTypeName(this);
	}
};




SolidityParser.UserDefinedTypeNameContext = UserDefinedTypeNameContext;

SolidityParser.prototype.userDefinedTypeName = function() {

    var localctx = new UserDefinedTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SolidityParser.RULE_userDefinedTypeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        this.identifier();
        this.state = 489;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 485;
                this.match(SolidityParser.T__32);
                this.state = 486;
                this.identifier(); 
            }
            this.state = 491;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_mapping;
    return this;
}

MappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MappingContext.prototype.constructor = MappingContext;

MappingContext.prototype.elementaryTypeName = function() {
    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
};

MappingContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

MappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterMapping(this);
	}
};

MappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitMapping(this);
	}
};




SolidityParser.MappingContext = MappingContext;

SolidityParser.prototype.mapping = function() {

    var localctx = new MappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SolidityParser.RULE_mapping);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 492;
        this.match(SolidityParser.T__33);
        this.state = 493;
        this.match(SolidityParser.T__18);
        this.state = 494;
        this.elementaryTypeName();
        this.state = 495;
        this.match(SolidityParser.T__34);
        this.state = 496;
        this.typeName(0);
        this.state = 497;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionTypeName;
    return this;
}

FunctionTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTypeNameContext.prototype.constructor = FunctionTypeNameContext;

FunctionTypeNameContext.prototype.typeNameList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeNameListContext);
    } else {
        return this.getTypedRuleContext(TypeNameListContext,i);
    }
};

FunctionTypeNameContext.prototype.stateMutability = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StateMutabilityContext);
    } else {
        return this.getTypedRuleContext(StateMutabilityContext,i);
    }
};

FunctionTypeNameContext.prototype.Internal = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Internal);
    } else {
        return this.getToken(SolidityParser.Internal, i);
    }
};


FunctionTypeNameContext.prototype.External = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.External);
    } else {
        return this.getToken(SolidityParser.External, i);
    }
};


FunctionTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterFunctionTypeName(this);
	}
};

FunctionTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitFunctionTypeName(this);
	}
};




SolidityParser.FunctionTypeNameContext = FunctionTypeNameContext;

SolidityParser.prototype.functionTypeName = function() {

    var localctx = new FunctionTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SolidityParser.RULE_functionTypeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 499;
        this.match(SolidityParser.T__25);
        this.state = 500;
        this.typeNameList();
        this.state = 506;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 504;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SolidityParser.Constant:
                case SolidityParser.Pure:
                case SolidityParser.View:
                case SolidityParser.Payable:
                    this.state = 501;
                    this.stateMutability();
                    break;
                case SolidityParser.Internal:
                    this.state = 502;
                    this.match(SolidityParser.Internal);
                    break;
                case SolidityParser.External:
                    this.state = 503;
                    this.match(SolidityParser.External);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 508;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
        }

        this.state = 511;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        if(la_===1) {
            this.state = 509;
            this.match(SolidityParser.T__27);
            this.state = 510;
            this.typeNameList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StorageLocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_storageLocation;
    return this;
}

StorageLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorageLocationContext.prototype.constructor = StorageLocationContext;


StorageLocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterStorageLocation(this);
	}
};

StorageLocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitStorageLocation(this);
	}
};




SolidityParser.StorageLocationContext = StorageLocationContext;

SolidityParser.prototype.storageLocation = function() {

    var localctx = new StorageLocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SolidityParser.RULE_storageLocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 513;
        _la = this._input.LA(1);
        if(!(_la===SolidityParser.T__35 || _la===SolidityParser.T__36)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementaryTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_elementaryTypeName;
    return this;
}

ElementaryTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementaryTypeNameContext.prototype.constructor = ElementaryTypeNameContext;

ElementaryTypeNameContext.prototype.Int = function() {
    return this.getToken(SolidityParser.Int, 0);
};

ElementaryTypeNameContext.prototype.Uint = function() {
    return this.getToken(SolidityParser.Uint, 0);
};

ElementaryTypeNameContext.prototype.Byte = function() {
    return this.getToken(SolidityParser.Byte, 0);
};

ElementaryTypeNameContext.prototype.Fixed = function() {
    return this.getToken(SolidityParser.Fixed, 0);
};

ElementaryTypeNameContext.prototype.Ufixed = function() {
    return this.getToken(SolidityParser.Ufixed, 0);
};

ElementaryTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterElementaryTypeName(this);
	}
};

ElementaryTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitElementaryTypeName(this);
	}
};




SolidityParser.ElementaryTypeNameContext = ElementaryTypeNameContext;

SolidityParser.prototype.elementaryTypeName = function() {

    var localctx = new ElementaryTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SolidityParser.RULE_elementaryTypeName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 515;
        _la = this._input.LA(1);
        if(!(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__38 - 38)) | (1 << (SolidityParser.T__39 - 38)) | (1 << (SolidityParser.T__40 - 38)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitBlock(this);
	}
};




SolidityParser.BlockContext = BlockContext;

SolidityParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SolidityParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 517;
        this.match(SolidityParser.T__11);
        this.state = 521;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__11) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__22) | (1 << SolidityParser.T__25) | (1 << SolidityParser.T__30))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (SolidityParser.T__33 - 34)) | (1 << (SolidityParser.T__37 - 34)) | (1 << (SolidityParser.T__38 - 34)) | (1 << (SolidityParser.T__39 - 34)) | (1 << (SolidityParser.T__40 - 34)) | (1 << (SolidityParser.T__41 - 34)) | (1 << (SolidityParser.T__43 - 34)) | (1 << (SolidityParser.T__44 - 34)) | (1 << (SolidityParser.T__45 - 34)) | (1 << (SolidityParser.T__46 - 34)) | (1 << (SolidityParser.T__47 - 34)) | (1 << (SolidityParser.T__48 - 34)) | (1 << (SolidityParser.T__49 - 34)) | (1 << (SolidityParser.T__50 - 34)) | (1 << (SolidityParser.T__51 - 34)) | (1 << (SolidityParser.T__52 - 34)) | (1 << (SolidityParser.T__53 - 34)) | (1 << (SolidityParser.T__54 - 34)) | (1 << (SolidityParser.T__55 - 34)) | (1 << (SolidityParser.T__56 - 34)) | (1 << (SolidityParser.T__57 - 34)) | (1 << (SolidityParser.T__58 - 34)) | (1 << (SolidityParser.T__59 - 34)))) !== 0) || ((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (SolidityParser.T__83 - 84)) | (1 << (SolidityParser.Int - 84)) | (1 << (SolidityParser.Uint - 84)) | (1 << (SolidityParser.Byte - 84)) | (1 << (SolidityParser.Fixed - 84)) | (1 << (SolidityParser.Ufixed - 84)) | (1 << (SolidityParser.BooleanLiteral - 84)) | (1 << (SolidityParser.DecimalNumber - 84)) | (1 << (SolidityParser.HexNumber - 84)) | (1 << (SolidityParser.HexLiteral - 84)))) !== 0) || _la===SolidityParser.StringLiteral || _la===SolidityParser.Identifier) {
            this.state = 518;
            this.statement();
            this.state = 523;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 524;
        this.match(SolidityParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

StatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

StatementContext.prototype.forStatement = function() {
    return this.getTypedRuleContext(ForStatementContext,0);
};

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.inlineAssemblyStatement = function() {
    return this.getTypedRuleContext(InlineAssemblyStatementContext,0);
};

StatementContext.prototype.doWhileStatement = function() {
    return this.getTypedRuleContext(DoWhileStatementContext,0);
};

StatementContext.prototype.placeholderStatement = function() {
    return this.getTypedRuleContext(PlaceholderStatementContext,0);
};

StatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementContext.prototype.throwStatement = function() {
    return this.getTypedRuleContext(ThrowStatementContext,0);
};

StatementContext.prototype.simpleStatement = function() {
    return this.getTypedRuleContext(SimpleStatementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitStatement(this);
	}
};




SolidityParser.StatementContext = StatementContext;

SolidityParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SolidityParser.RULE_statement);
    try {
        this.state = 538;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__41:
            this.enterOuterAlt(localctx, 1);
            this.state = 526;
            this.ifStatement();
            break;
        case SolidityParser.T__43:
            this.enterOuterAlt(localctx, 2);
            this.state = 527;
            this.whileStatement();
            break;
        case SolidityParser.T__22:
            this.enterOuterAlt(localctx, 3);
            this.state = 528;
            this.forStatement();
            break;
        case SolidityParser.T__11:
            this.enterOuterAlt(localctx, 4);
            this.state = 529;
            this.block();
            break;
        case SolidityParser.T__83:
            this.enterOuterAlt(localctx, 5);
            this.state = 530;
            this.inlineAssemblyStatement();
            break;
        case SolidityParser.T__44:
            this.enterOuterAlt(localctx, 6);
            this.state = 531;
            this.doWhileStatement();
            break;
        case SolidityParser.T__45:
            this.enterOuterAlt(localctx, 7);
            this.state = 532;
            this.placeholderStatement();
            break;
        case SolidityParser.T__46:
            this.enterOuterAlt(localctx, 8);
            this.state = 533;
            this.continueStatement();
            break;
        case SolidityParser.T__47:
            this.enterOuterAlt(localctx, 9);
            this.state = 534;
            this.breakStatement();
            break;
        case SolidityParser.T__48:
            this.enterOuterAlt(localctx, 10);
            this.state = 535;
            this.returnStatement();
            break;
        case SolidityParser.T__49:
            this.enterOuterAlt(localctx, 11);
            this.state = 536;
            this.throwStatement();
            break;
        case SolidityParser.T__10:
        case SolidityParser.T__18:
        case SolidityParser.T__25:
        case SolidityParser.T__30:
        case SolidityParser.T__33:
        case SolidityParser.T__37:
        case SolidityParser.T__38:
        case SolidityParser.T__39:
        case SolidityParser.T__40:
        case SolidityParser.T__50:
        case SolidityParser.T__51:
        case SolidityParser.T__52:
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.T__57:
        case SolidityParser.T__58:
        case SolidityParser.T__59:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.BooleanLiteral:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.StringLiteral:
        case SolidityParser.Identifier:
            this.enterOuterAlt(localctx, 12);
            this.state = 537;
            this.simpleStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitExpressionStatement(this);
	}
};




SolidityParser.ExpressionStatementContext = ExpressionStatementContext;

SolidityParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SolidityParser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 540;
        this.expression(0);
        this.state = 541;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitIfStatement(this);
	}
};




SolidityParser.IfStatementContext = IfStatementContext;

SolidityParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SolidityParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 543;
        this.match(SolidityParser.T__41);
        this.state = 544;
        this.match(SolidityParser.T__18);
        this.state = 545;
        this.expression(0);
        this.state = 546;
        this.match(SolidityParser.T__19);
        this.state = 547;
        this.statement();
        this.state = 550;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        if(la_===1) {
            this.state = 548;
            this.match(SolidityParser.T__42);
            this.state = 549;
            this.statement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitWhileStatement(this);
	}
};




SolidityParser.WhileStatementContext = WhileStatementContext;

SolidityParser.prototype.whileStatement = function() {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SolidityParser.RULE_whileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 552;
        this.match(SolidityParser.T__43);
        this.state = 553;
        this.match(SolidityParser.T__18);
        this.state = 554;
        this.expression(0);
        this.state = 555;
        this.match(SolidityParser.T__19);
        this.state = 556;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpleStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_simpleStatement;
    return this;
}

SimpleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleStatementContext.prototype.constructor = SimpleStatementContext;

SimpleStatementContext.prototype.variableDeclarationStatement = function() {
    return this.getTypedRuleContext(VariableDeclarationStatementContext,0);
};

SimpleStatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

SimpleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterSimpleStatement(this);
	}
};

SimpleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitSimpleStatement(this);
	}
};




SolidityParser.SimpleStatementContext = SimpleStatementContext;

SolidityParser.prototype.simpleStatement = function() {

    var localctx = new SimpleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SolidityParser.RULE_simpleStatement);
    try {
        this.state = 560;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 558;
            this.variableDeclarationStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 559;
            this.expressionStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_forStatement;
    return this;
}

ForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForStatementContext.prototype.simpleStatement = function() {
    return this.getTypedRuleContext(SimpleStatementContext,0);
};

ForStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterForStatement(this);
	}
};

ForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitForStatement(this);
	}
};




SolidityParser.ForStatementContext = ForStatementContext;

SolidityParser.prototype.forStatement = function() {

    var localctx = new ForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SolidityParser.RULE_forStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 562;
        this.match(SolidityParser.T__22);
        this.state = 563;
        this.match(SolidityParser.T__18);
        this.state = 566;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__10:
        case SolidityParser.T__18:
        case SolidityParser.T__25:
        case SolidityParser.T__30:
        case SolidityParser.T__33:
        case SolidityParser.T__37:
        case SolidityParser.T__38:
        case SolidityParser.T__39:
        case SolidityParser.T__40:
        case SolidityParser.T__50:
        case SolidityParser.T__51:
        case SolidityParser.T__52:
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.T__57:
        case SolidityParser.T__58:
        case SolidityParser.T__59:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.BooleanLiteral:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.StringLiteral:
        case SolidityParser.Identifier:
            this.state = 564;
            this.simpleStatement();
            break;
        case SolidityParser.T__1:
            this.state = 565;
            this.match(SolidityParser.T__1);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 569;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__30))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__38 - 38)) | (1 << (SolidityParser.T__39 - 38)) | (1 << (SolidityParser.T__40 - 38)) | (1 << (SolidityParser.T__50 - 38)) | (1 << (SolidityParser.T__51 - 38)) | (1 << (SolidityParser.T__52 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteral - 96)) | (1 << (SolidityParser.StringLiteral - 96)) | (1 << (SolidityParser.Identifier - 96)))) !== 0)) {
            this.state = 568;
            this.expression(0);
        }

        this.state = 571;
        this.match(SolidityParser.T__1);
        this.state = 573;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__30))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__38 - 38)) | (1 << (SolidityParser.T__39 - 38)) | (1 << (SolidityParser.T__40 - 38)) | (1 << (SolidityParser.T__50 - 38)) | (1 << (SolidityParser.T__51 - 38)) | (1 << (SolidityParser.T__52 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteral - 96)) | (1 << (SolidityParser.StringLiteral - 96)) | (1 << (SolidityParser.Identifier - 96)))) !== 0)) {
            this.state = 572;
            this.expression(0);
        }

        this.state = 575;
        this.match(SolidityParser.T__19);
        this.state = 576;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DoWhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_doWhileStatement;
    return this;
}

DoWhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoWhileStatementContext.prototype.constructor = DoWhileStatementContext;

DoWhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

DoWhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DoWhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterDoWhileStatement(this);
	}
};

DoWhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitDoWhileStatement(this);
	}
};




SolidityParser.DoWhileStatementContext = DoWhileStatementContext;

SolidityParser.prototype.doWhileStatement = function() {

    var localctx = new DoWhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SolidityParser.RULE_doWhileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 578;
        this.match(SolidityParser.T__44);
        this.state = 579;
        this.statement();
        this.state = 580;
        this.match(SolidityParser.T__43);
        this.state = 581;
        this.match(SolidityParser.T__18);
        this.state = 582;
        this.expression(0);
        this.state = 583;
        this.match(SolidityParser.T__19);
        this.state = 584;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PlaceholderStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_placeholderStatement;
    return this;
}

PlaceholderStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlaceholderStatementContext.prototype.constructor = PlaceholderStatementContext;


PlaceholderStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterPlaceholderStatement(this);
	}
};

PlaceholderStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitPlaceholderStatement(this);
	}
};




SolidityParser.PlaceholderStatementContext = PlaceholderStatementContext;

SolidityParser.prototype.placeholderStatement = function() {

    var localctx = new PlaceholderStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SolidityParser.RULE_placeholderStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 586;
        this.match(SolidityParser.T__45);
        this.state = 587;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;


ContinueStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterContinueStatement(this);
	}
};

ContinueStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitContinueStatement(this);
	}
};




SolidityParser.ContinueStatementContext = ContinueStatementContext;

SolidityParser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SolidityParser.RULE_continueStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 589;
        this.match(SolidityParser.T__46);
        this.state = 590;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;


BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitBreakStatement(this);
	}
};




SolidityParser.BreakStatementContext = BreakStatementContext;

SolidityParser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SolidityParser.RULE_breakStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 592;
        this.match(SolidityParser.T__47);
        this.state = 593;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitReturnStatement(this);
	}
};




SolidityParser.ReturnStatementContext = ReturnStatementContext;

SolidityParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SolidityParser.RULE_returnStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 595;
        this.match(SolidityParser.T__48);
        this.state = 597;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__30))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__38 - 38)) | (1 << (SolidityParser.T__39 - 38)) | (1 << (SolidityParser.T__40 - 38)) | (1 << (SolidityParser.T__50 - 38)) | (1 << (SolidityParser.T__51 - 38)) | (1 << (SolidityParser.T__52 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteral - 96)) | (1 << (SolidityParser.StringLiteral - 96)) | (1 << (SolidityParser.Identifier - 96)))) !== 0)) {
            this.state = 596;
            this.expression(0);
        }

        this.state = 599;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ThrowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_throwStatement;
    return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;


ThrowStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterThrowStatement(this);
	}
};

ThrowStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitThrowStatement(this);
	}
};




SolidityParser.ThrowStatementContext = ThrowStatementContext;

SolidityParser.prototype.throwStatement = function() {

    var localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SolidityParser.RULE_throwStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 601;
        this.match(SolidityParser.T__49);
        this.state = 602;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_variableDeclarationStatement;
    return this;
}

VariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationStatementContext.prototype.constructor = VariableDeclarationStatementContext;

VariableDeclarationStatementContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

VariableDeclarationStatementContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

VariableDeclarationStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

VariableDeclarationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterVariableDeclarationStatement(this);
	}
};

VariableDeclarationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitVariableDeclarationStatement(this);
	}
};




SolidityParser.VariableDeclarationStatementContext = VariableDeclarationStatementContext;

SolidityParser.prototype.variableDeclarationStatement = function() {

    var localctx = new VariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SolidityParser.RULE_variableDeclarationStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 607;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            this.state = 604;
            this.match(SolidityParser.T__39);
            this.state = 605;
            this.identifierList();
            break;

        case 2:
            this.state = 606;
            this.variableDeclaration();
            break;

        }
        this.state = 611;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__20) {
            this.state = 609;
            this.match(SolidityParser.T__20);
            this.state = 610;
            this.expression(0);
        }

        this.state = 613;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

IdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterIdentifierList(this);
	}
};

IdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitIdentifierList(this);
	}
};




SolidityParser.IdentifierListContext = IdentifierListContext;

SolidityParser.prototype.identifierList = function() {

    var localctx = new IdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SolidityParser.RULE_identifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 615;
        this.match(SolidityParser.T__18);
        this.state = 622;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 617;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier) {
                    this.state = 616;
                    this.identifier();
                }

                this.state = 619;
                this.match(SolidityParser.T__12); 
            }
            this.state = 624;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
        }

        this.state = 626;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier) {
            this.state = 625;
            this.identifier();
        }

        this.state = 628;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.functionCallArguments = function() {
    return this.getTypedRuleContext(FunctionCallArgumentsContext,0);
};

ExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitExpression(this);
	}
};



SolidityParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 108;
    this.enterRecursionRule(localctx, 108, SolidityParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 654;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        switch(la_) {
        case 1:
            this.state = 631;
            this.match(SolidityParser.T__52);
            this.state = 632;
            this.typeName(0);
            break;

        case 2:
            this.state = 633;
            this.match(SolidityParser.T__53);
            this.state = 634;
            this.expression(0);
            this.state = 635;
            this.match(SolidityParser.T__18);
            this.state = 636;
            this.functionCallArguments();
            this.state = 637;
            this.match(SolidityParser.T__19);
            break;

        case 3:
            this.state = 639;
            this.match(SolidityParser.T__18);
            this.state = 640;
            this.expression(0);
            this.state = 641;
            this.match(SolidityParser.T__19);
            break;

        case 4:
            this.state = 643;
            _la = this._input.LA(1);
            if(!(_la===SolidityParser.T__50 || _la===SolidityParser.T__51)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 644;
            this.expression(19);
            break;

        case 5:
            this.state = 645;
            _la = this._input.LA(1);
            if(!(_la===SolidityParser.T__54 || _la===SolidityParser.T__55)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 646;
            this.expression(18);
            break;

        case 6:
            this.state = 647;
            _la = this._input.LA(1);
            if(!(_la===SolidityParser.T__56 || _la===SolidityParser.T__57)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 648;
            this.expression(17);
            break;

        case 7:
            this.state = 649;
            this.match(SolidityParser.T__58);
            this.state = 650;
            this.expression(16);
            break;

        case 8:
            this.state = 651;
            this.match(SolidityParser.T__59);
            this.state = 652;
            this.expression(15);
            break;

        case 9:
            this.state = 653;
            this.primaryExpression();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 715;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,68,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 713;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 656;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 657;
                    this.match(SolidityParser.T__32);
                    this.state = 658;
                    this.expression(22);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 659;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 660;
                    this.match(SolidityParser.T__60);
                    this.state = 661;
                    this.expression(15);
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 662;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 663;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__9 || _la===SolidityParser.T__61 || _la===SolidityParser.T__62)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 664;
                    this.expression(14);
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 665;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 666;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__54 || _la===SolidityParser.T__55)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 667;
                    this.expression(13);
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 668;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 669;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__63 || _la===SolidityParser.T__64)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 670;
                    this.expression(12);
                    break;

                case 6:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 671;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 672;
                    this.match(SolidityParser.T__65);
                    this.state = 673;
                    this.expression(11);
                    break;

                case 7:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 674;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 675;
                    this.match(SolidityParser.T__4);
                    this.state = 676;
                    this.expression(10);
                    break;

                case 8:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 677;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 678;
                    this.match(SolidityParser.T__66);
                    this.state = 679;
                    this.expression(9);
                    break;

                case 9:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 680;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 681;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 682;
                    this.expression(8);
                    break;

                case 10:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 683;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 684;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__67 || _la===SolidityParser.T__68)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 685;
                    this.expression(7);
                    break;

                case 11:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 686;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 687;
                    this.match(SolidityParser.T__69);
                    this.state = 688;
                    this.expression(6);
                    break;

                case 12:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 689;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 690;
                    this.match(SolidityParser.T__70);
                    this.state = 691;
                    this.expression(5);
                    break;

                case 13:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 692;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 693;
                    this.match(SolidityParser.T__71);
                    this.state = 694;
                    this.expression(0);
                    this.state = 695;
                    this.match(SolidityParser.T__72);
                    this.state = 696;
                    this.expression(4);
                    break;

                case 14:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 698;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 699;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__20 || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SolidityParser.T__73 - 74)) | (1 << (SolidityParser.T__74 - 74)) | (1 << (SolidityParser.T__75 - 74)) | (1 << (SolidityParser.T__76 - 74)) | (1 << (SolidityParser.T__77 - 74)) | (1 << (SolidityParser.T__78 - 74)) | (1 << (SolidityParser.T__79 - 74)) | (1 << (SolidityParser.T__80 - 74)) | (1 << (SolidityParser.T__81 - 74)) | (1 << (SolidityParser.T__82 - 74)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 700;
                    this.expression(3);
                    break;

                case 15:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 701;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 702;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__50 || _la===SolidityParser.T__51)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                case 16:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 703;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 704;
                    this.match(SolidityParser.T__30);
                    this.state = 705;
                    this.expression(0);
                    this.state = 706;
                    this.match(SolidityParser.T__31);
                    break;

                case 17:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 708;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 709;
                    this.match(SolidityParser.T__18);
                    this.state = 710;
                    this.functionCallArguments();
                    this.state = 711;
                    this.match(SolidityParser.T__19);
                    break;

                } 
            }
            this.state = 717;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,68,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

PrimaryExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrimaryExpressionContext.prototype.tupleExpression = function() {
    return this.getTypedRuleContext(TupleExpressionContext,0);
};

PrimaryExpressionContext.prototype.elementaryTypeNameExpression = function() {
    return this.getTypedRuleContext(ElementaryTypeNameExpressionContext,0);
};

PrimaryExpressionContext.prototype.HexLiteral = function() {
    return this.getToken(SolidityParser.HexLiteral, 0);
};

PrimaryExpressionContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

PrimaryExpressionContext.prototype.BooleanLiteral = function() {
    return this.getToken(SolidityParser.BooleanLiteral, 0);
};

PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitPrimaryExpression(this);
	}
};




SolidityParser.PrimaryExpressionContext = PrimaryExpressionContext;

SolidityParser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SolidityParser.RULE_primaryExpression);
    try {
        this.state = 725;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
            this.enterOuterAlt(localctx, 1);
            this.state = 718;
            this.numberLiteral();
            break;
        case SolidityParser.T__10:
        case SolidityParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 719;
            this.identifier();
            break;
        case SolidityParser.T__18:
        case SolidityParser.T__30:
            this.enterOuterAlt(localctx, 3);
            this.state = 720;
            this.tupleExpression();
            break;
        case SolidityParser.T__37:
        case SolidityParser.T__38:
        case SolidityParser.T__39:
        case SolidityParser.T__40:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
            this.enterOuterAlt(localctx, 4);
            this.state = 721;
            this.elementaryTypeNameExpression();
            break;
        case SolidityParser.HexLiteral:
            this.enterOuterAlt(localctx, 5);
            this.state = 722;
            this.match(SolidityParser.HexLiteral);
            break;
        case SolidityParser.StringLiteral:
            this.enterOuterAlt(localctx, 6);
            this.state = 723;
            this.match(SolidityParser.StringLiteral);
            break;
        case SolidityParser.BooleanLiteral:
            this.enterOuterAlt(localctx, 7);
            this.state = 724;
            this.match(SolidityParser.BooleanLiteral);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitExpressionList(this);
	}
};




SolidityParser.ExpressionListContext = ExpressionListContext;

SolidityParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SolidityParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 727;
        this.expression(0);
        this.state = 732;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__12) {
            this.state = 728;
            this.match(SolidityParser.T__12);
            this.state = 729;
            this.expression(0);
            this.state = 734;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameValueListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_nameValueList;
    return this;
}

NameValueListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameValueListContext.prototype.constructor = NameValueListContext;

NameValueListContext.prototype.nameValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameValueContext);
    } else {
        return this.getTypedRuleContext(NameValueContext,i);
    }
};

NameValueListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterNameValueList(this);
	}
};

NameValueListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitNameValueList(this);
	}
};




SolidityParser.NameValueListContext = NameValueListContext;

SolidityParser.prototype.nameValueList = function() {

    var localctx = new NameValueListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SolidityParser.RULE_nameValueList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 735;
        this.nameValue();
        this.state = 740;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 736;
                this.match(SolidityParser.T__12);
                this.state = 737;
                this.nameValue(); 
            }
            this.state = 742;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
        }

        this.state = 744;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__12) {
            this.state = 743;
            this.match(SolidityParser.T__12);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_nameValue;
    return this;
}

NameValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameValueContext.prototype.constructor = NameValueContext;

NameValueContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NameValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NameValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterNameValue(this);
	}
};

NameValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitNameValue(this);
	}
};




SolidityParser.NameValueContext = NameValueContext;

SolidityParser.prototype.nameValue = function() {

    var localctx = new NameValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SolidityParser.RULE_nameValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 746;
        this.identifier();
        this.state = 747;
        this.match(SolidityParser.T__72);
        this.state = 748;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionCallArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionCallArguments;
    return this;
}

FunctionCallArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallArgumentsContext.prototype.constructor = FunctionCallArgumentsContext;

FunctionCallArgumentsContext.prototype.nameValueList = function() {
    return this.getTypedRuleContext(NameValueListContext,0);
};

FunctionCallArgumentsContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

FunctionCallArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterFunctionCallArguments(this);
	}
};

FunctionCallArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitFunctionCallArguments(this);
	}
};




SolidityParser.FunctionCallArgumentsContext = FunctionCallArgumentsContext;

SolidityParser.prototype.functionCallArguments = function() {

    var localctx = new FunctionCallArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SolidityParser.RULE_functionCallArguments);
    var _la = 0; // Token type
    try {
        this.state = 758;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__11:
            this.enterOuterAlt(localctx, 1);
            this.state = 750;
            this.match(SolidityParser.T__11);
            this.state = 752;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier) {
                this.state = 751;
                this.nameValueList();
            }

            this.state = 754;
            this.match(SolidityParser.T__13);
            break;
        case SolidityParser.T__10:
        case SolidityParser.T__18:
        case SolidityParser.T__19:
        case SolidityParser.T__30:
        case SolidityParser.T__37:
        case SolidityParser.T__38:
        case SolidityParser.T__39:
        case SolidityParser.T__40:
        case SolidityParser.T__50:
        case SolidityParser.T__51:
        case SolidityParser.T__52:
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.T__57:
        case SolidityParser.T__58:
        case SolidityParser.T__59:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.BooleanLiteral:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.StringLiteral:
        case SolidityParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 756;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__30))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__38 - 38)) | (1 << (SolidityParser.T__39 - 38)) | (1 << (SolidityParser.T__40 - 38)) | (1 << (SolidityParser.T__50 - 38)) | (1 << (SolidityParser.T__51 - 38)) | (1 << (SolidityParser.T__52 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteral - 96)) | (1 << (SolidityParser.StringLiteral - 96)) | (1 << (SolidityParser.Identifier - 96)))) !== 0)) {
                this.state = 755;
                this.expressionList();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TupleExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_tupleExpression;
    return this;
}

TupleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TupleExpressionContext.prototype.constructor = TupleExpressionContext;

TupleExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

TupleExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterTupleExpression(this);
	}
};

TupleExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitTupleExpression(this);
	}
};




SolidityParser.TupleExpressionContext = TupleExpressionContext;

SolidityParser.prototype.tupleExpression = function() {

    var localctx = new TupleExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SolidityParser.RULE_tupleExpression);
    var _la = 0; // Token type
    try {
        this.state = 784;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__18:
            this.enterOuterAlt(localctx, 1);
            this.state = 760;
            this.match(SolidityParser.T__18);
            this.state = 769;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__30))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__38 - 38)) | (1 << (SolidityParser.T__39 - 38)) | (1 << (SolidityParser.T__40 - 38)) | (1 << (SolidityParser.T__50 - 38)) | (1 << (SolidityParser.T__51 - 38)) | (1 << (SolidityParser.T__52 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteral - 96)) | (1 << (SolidityParser.StringLiteral - 96)) | (1 << (SolidityParser.Identifier - 96)))) !== 0)) {
                this.state = 761;
                this.expression(0);
                this.state = 766;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SolidityParser.T__12) {
                    this.state = 762;
                    this.match(SolidityParser.T__12);
                    this.state = 763;
                    this.expression(0);
                    this.state = 768;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 771;
            this.match(SolidityParser.T__19);
            break;
        case SolidityParser.T__30:
            this.enterOuterAlt(localctx, 2);
            this.state = 772;
            this.match(SolidityParser.T__30);
            this.state = 781;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__30))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__38 - 38)) | (1 << (SolidityParser.T__39 - 38)) | (1 << (SolidityParser.T__40 - 38)) | (1 << (SolidityParser.T__50 - 38)) | (1 << (SolidityParser.T__51 - 38)) | (1 << (SolidityParser.T__52 - 38)) | (1 << (SolidityParser.T__53 - 38)) | (1 << (SolidityParser.T__54 - 38)) | (1 << (SolidityParser.T__55 - 38)) | (1 << (SolidityParser.T__56 - 38)) | (1 << (SolidityParser.T__57 - 38)) | (1 << (SolidityParser.T__58 - 38)) | (1 << (SolidityParser.T__59 - 38)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.BooleanLiteral - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteral - 96)) | (1 << (SolidityParser.StringLiteral - 96)) | (1 << (SolidityParser.Identifier - 96)))) !== 0)) {
                this.state = 773;
                this.expression(0);
                this.state = 778;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SolidityParser.T__12) {
                    this.state = 774;
                    this.match(SolidityParser.T__12);
                    this.state = 775;
                    this.expression(0);
                    this.state = 780;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 783;
            this.match(SolidityParser.T__31);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementaryTypeNameExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_elementaryTypeNameExpression;
    return this;
}

ElementaryTypeNameExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementaryTypeNameExpressionContext.prototype.constructor = ElementaryTypeNameExpressionContext;

ElementaryTypeNameExpressionContext.prototype.elementaryTypeName = function() {
    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
};

ElementaryTypeNameExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterElementaryTypeNameExpression(this);
	}
};

ElementaryTypeNameExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitElementaryTypeNameExpression(this);
	}
};




SolidityParser.ElementaryTypeNameExpressionContext = ElementaryTypeNameExpressionContext;

SolidityParser.prototype.elementaryTypeNameExpression = function() {

    var localctx = new ElementaryTypeNameExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SolidityParser.RULE_elementaryTypeNameExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 786;
        this.elementaryTypeName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineAssemblyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_inlineAssemblyStatement;
    return this;
}

InlineAssemblyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineAssemblyStatementContext.prototype.constructor = InlineAssemblyStatementContext;

InlineAssemblyStatementContext.prototype.assemblyBlock = function() {
    return this.getTypedRuleContext(AssemblyBlockContext,0);
};

InlineAssemblyStatementContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

InlineAssemblyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterInlineAssemblyStatement(this);
	}
};

InlineAssemblyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitInlineAssemblyStatement(this);
	}
};




SolidityParser.InlineAssemblyStatementContext = InlineAssemblyStatementContext;

SolidityParser.prototype.inlineAssemblyStatement = function() {

    var localctx = new InlineAssemblyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SolidityParser.RULE_inlineAssemblyStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 788;
        this.match(SolidityParser.T__83);
        this.state = 790;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.StringLiteral) {
            this.state = 789;
            this.match(SolidityParser.StringLiteral);
        }

        this.state = 792;
        this.assemblyBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyBlock;
    return this;
}

AssemblyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyBlockContext.prototype.constructor = AssemblyBlockContext;

AssemblyBlockContext.prototype.assemblyItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssemblyItemContext);
    } else {
        return this.getTypedRuleContext(AssemblyItemContext,i);
    }
};

AssemblyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyBlock(this);
	}
};

AssemblyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyBlock(this);
	}
};




SolidityParser.AssemblyBlockContext = AssemblyBlockContext;

SolidityParser.prototype.assemblyBlock = function() {

    var localctx = new AssemblyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SolidityParser.RULE_assemblyBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 794;
        this.match(SolidityParser.T__11);
        this.state = 798;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__11) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__22) | (1 << SolidityParser.T__25))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__38 - 38)) | (1 << (SolidityParser.T__39 - 38)) | (1 << (SolidityParser.T__40 - 38)) | (1 << (SolidityParser.T__46 - 38)) | (1 << (SolidityParser.T__47 - 38)) | (1 << (SolidityParser.T__48 - 38)))) !== 0) || ((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (SolidityParser.T__83 - 84)) | (1 << (SolidityParser.T__84 - 84)) | (1 << (SolidityParser.T__85 - 84)) | (1 << (SolidityParser.T__86 - 84)) | (1 << (SolidityParser.T__88 - 84)) | (1 << (SolidityParser.T__91 - 84)) | (1 << (SolidityParser.T__93 - 84)) | (1 << (SolidityParser.T__94 - 84)) | (1 << (SolidityParser.Int - 84)) | (1 << (SolidityParser.Uint - 84)) | (1 << (SolidityParser.Byte - 84)) | (1 << (SolidityParser.Fixed - 84)) | (1 << (SolidityParser.Ufixed - 84)) | (1 << (SolidityParser.DecimalNumber - 84)) | (1 << (SolidityParser.HexNumber - 84)) | (1 << (SolidityParser.HexLiteral - 84)))) !== 0) || _la===SolidityParser.StringLiteral || _la===SolidityParser.Identifier) {
            this.state = 795;
            this.assemblyItem();
            this.state = 800;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 801;
        this.match(SolidityParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyItem;
    return this;
}

AssemblyItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyItemContext.prototype.constructor = AssemblyItemContext;

AssemblyItemContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AssemblyItemContext.prototype.assemblyBlock = function() {
    return this.getTypedRuleContext(AssemblyBlockContext,0);
};

AssemblyItemContext.prototype.assemblyExpression = function() {
    return this.getTypedRuleContext(AssemblyExpressionContext,0);
};

AssemblyItemContext.prototype.assemblyLocalDefinition = function() {
    return this.getTypedRuleContext(AssemblyLocalDefinitionContext,0);
};

AssemblyItemContext.prototype.assemblyAssignment = function() {
    return this.getTypedRuleContext(AssemblyAssignmentContext,0);
};

AssemblyItemContext.prototype.assemblyRightAssignment = function() {
    return this.getTypedRuleContext(AssemblyRightAssignmentContext,0);
};

AssemblyItemContext.prototype.labelDefinition = function() {
    return this.getTypedRuleContext(LabelDefinitionContext,0);
};

AssemblyItemContext.prototype.assemblySwitch = function() {
    return this.getTypedRuleContext(AssemblySwitchContext,0);
};

AssemblyItemContext.prototype.assemblyFunctionDefinition = function() {
    return this.getTypedRuleContext(AssemblyFunctionDefinitionContext,0);
};

AssemblyItemContext.prototype.assemblyFor = function() {
    return this.getTypedRuleContext(AssemblyForContext,0);
};

AssemblyItemContext.prototype.subAssembly = function() {
    return this.getTypedRuleContext(SubAssemblyContext,0);
};

AssemblyItemContext.prototype.dataSize = function() {
    return this.getTypedRuleContext(DataSizeContext,0);
};

AssemblyItemContext.prototype.linkerSymbol = function() {
    return this.getTypedRuleContext(LinkerSymbolContext,0);
};

AssemblyItemContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

AssemblyItemContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

AssemblyItemContext.prototype.HexLiteral = function() {
    return this.getToken(SolidityParser.HexLiteral, 0);
};

AssemblyItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyItem(this);
	}
};

AssemblyItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyItem(this);
	}
};




SolidityParser.AssemblyItemContext = AssemblyItemContext;

SolidityParser.prototype.assemblyItem = function() {

    var localctx = new AssemblyItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SolidityParser.RULE_assemblyItem);
    try {
        this.state = 823;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 803;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 804;
            this.assemblyBlock();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 805;
            this.assemblyExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 806;
            this.assemblyLocalDefinition();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 807;
            this.assemblyAssignment();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 808;
            this.assemblyRightAssignment();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 809;
            this.labelDefinition();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 810;
            this.assemblySwitch();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 811;
            this.assemblyFunctionDefinition();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 812;
            this.assemblyFor();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 813;
            this.match(SolidityParser.T__47);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 814;
            this.match(SolidityParser.T__46);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 815;
            this.subAssembly();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 816;
            this.dataSize();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 817;
            this.linkerSymbol();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 818;
            this.match(SolidityParser.T__84);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 819;
            this.match(SolidityParser.T__85);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 820;
            this.numberLiteral();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 821;
            this.match(SolidityParser.StringLiteral);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 822;
            this.match(SolidityParser.HexLiteral);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyExpression;
    return this;
}

AssemblyExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyExpressionContext.prototype.constructor = AssemblyExpressionContext;

AssemblyExpressionContext.prototype.assemblyCall = function() {
    return this.getTypedRuleContext(AssemblyCallContext,0);
};

AssemblyExpressionContext.prototype.assemblyLiteral = function() {
    return this.getTypedRuleContext(AssemblyLiteralContext,0);
};

AssemblyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyExpression(this);
	}
};

AssemblyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyExpression(this);
	}
};




SolidityParser.AssemblyExpressionContext = AssemblyExpressionContext;

SolidityParser.prototype.assemblyExpression = function() {

    var localctx = new AssemblyExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SolidityParser.RULE_assemblyExpression);
    try {
        this.state = 827;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__37:
        case SolidityParser.T__38:
        case SolidityParser.T__39:
        case SolidityParser.T__40:
        case SolidityParser.T__48:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 825;
            this.assemblyCall();
            break;
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.StringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 826;
            this.assemblyLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyCall;
    return this;
}

AssemblyCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyCallContext.prototype.constructor = AssemblyCallContext;

AssemblyCallContext.prototype.elementaryTypeName = function() {
    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
};

AssemblyCallContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

AssemblyCallContext.prototype.assemblyExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssemblyExpressionContext);
    } else {
        return this.getTypedRuleContext(AssemblyExpressionContext,i);
    }
};

AssemblyCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyCall(this);
	}
};

AssemblyCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyCall(this);
	}
};




SolidityParser.AssemblyCallContext = AssemblyCallContext;

SolidityParser.prototype.assemblyCall = function() {

    var localctx = new AssemblyCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, SolidityParser.RULE_assemblyCall);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 833;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            this.state = 829;
            this.match(SolidityParser.T__48);
            break;

        case 2:
            this.state = 830;
            this.match(SolidityParser.T__37);
            break;

        case 3:
            this.state = 831;
            this.elementaryTypeName();
            break;

        case 4:
            this.state = 832;
            this.match(SolidityParser.Identifier);
            break;

        }
        this.state = 847;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        if(la_===1) {
            this.state = 835;
            this.match(SolidityParser.T__18);
            this.state = 837;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SolidityParser.T__37 - 38)) | (1 << (SolidityParser.T__38 - 38)) | (1 << (SolidityParser.T__39 - 38)) | (1 << (SolidityParser.T__40 - 38)) | (1 << (SolidityParser.T__48 - 38)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SolidityParser.Int - 96)) | (1 << (SolidityParser.Uint - 96)) | (1 << (SolidityParser.Byte - 96)) | (1 << (SolidityParser.Fixed - 96)) | (1 << (SolidityParser.Ufixed - 96)) | (1 << (SolidityParser.DecimalNumber - 96)) | (1 << (SolidityParser.HexNumber - 96)) | (1 << (SolidityParser.HexLiteral - 96)) | (1 << (SolidityParser.StringLiteral - 96)) | (1 << (SolidityParser.Identifier - 96)))) !== 0)) {
                this.state = 836;
                this.assemblyExpression();
            }

            this.state = 843;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 839;
                this.match(SolidityParser.T__12);
                this.state = 840;
                this.assemblyExpression();
                this.state = 845;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 846;
            this.match(SolidityParser.T__19);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyLocalDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyLocalDefinition;
    return this;
}

AssemblyLocalDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyLocalDefinitionContext.prototype.constructor = AssemblyLocalDefinitionContext;

AssemblyLocalDefinitionContext.prototype.assemblyIdentifierOrList = function() {
    return this.getTypedRuleContext(AssemblyIdentifierOrListContext,0);
};

AssemblyLocalDefinitionContext.prototype.assemblyExpression = function() {
    return this.getTypedRuleContext(AssemblyExpressionContext,0);
};

AssemblyLocalDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyLocalDefinition(this);
	}
};

AssemblyLocalDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyLocalDefinition(this);
	}
};




SolidityParser.AssemblyLocalDefinitionContext = AssemblyLocalDefinitionContext;

SolidityParser.prototype.assemblyLocalDefinition = function() {

    var localctx = new AssemblyLocalDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, SolidityParser.RULE_assemblyLocalDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 849;
        this.match(SolidityParser.T__86);
        this.state = 850;
        this.assemblyIdentifierOrList();
        this.state = 851;
        this.match(SolidityParser.T__87);
        this.state = 852;
        this.assemblyExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyAssignment;
    return this;
}

AssemblyAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyAssignmentContext.prototype.constructor = AssemblyAssignmentContext;

AssemblyAssignmentContext.prototype.assemblyIdentifierOrList = function() {
    return this.getTypedRuleContext(AssemblyIdentifierOrListContext,0);
};

AssemblyAssignmentContext.prototype.assemblyExpression = function() {
    return this.getTypedRuleContext(AssemblyExpressionContext,0);
};

AssemblyAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyAssignment(this);
	}
};

AssemblyAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyAssignment(this);
	}
};




SolidityParser.AssemblyAssignmentContext = AssemblyAssignmentContext;

SolidityParser.prototype.assemblyAssignment = function() {

    var localctx = new AssemblyAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, SolidityParser.RULE_assemblyAssignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 854;
        this.assemblyIdentifierOrList();
        this.state = 855;
        this.match(SolidityParser.T__87);
        this.state = 856;
        this.assemblyExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyIdentifierOrListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyIdentifierOrList;
    return this;
}

AssemblyIdentifierOrListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyIdentifierOrListContext.prototype.constructor = AssemblyIdentifierOrListContext;

AssemblyIdentifierOrListContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AssemblyIdentifierOrListContext.prototype.assemblyIdentifierList = function() {
    return this.getTypedRuleContext(AssemblyIdentifierListContext,0);
};

AssemblyIdentifierOrListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyIdentifierOrList(this);
	}
};

AssemblyIdentifierOrListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyIdentifierOrList(this);
	}
};




SolidityParser.AssemblyIdentifierOrListContext = AssemblyIdentifierOrListContext;

SolidityParser.prototype.assemblyIdentifierOrList = function() {

    var localctx = new AssemblyIdentifierOrListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SolidityParser.RULE_assemblyIdentifierOrList);
    try {
        this.state = 863;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__10:
        case SolidityParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 858;
            this.identifier();
            break;
        case SolidityParser.T__18:
            this.enterOuterAlt(localctx, 2);
            this.state = 859;
            this.match(SolidityParser.T__18);
            this.state = 860;
            this.assemblyIdentifierList();
            this.state = 861;
            this.match(SolidityParser.T__19);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyIdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyIdentifierList;
    return this;
}

AssemblyIdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyIdentifierListContext.prototype.constructor = AssemblyIdentifierListContext;

AssemblyIdentifierListContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Identifier);
    } else {
        return this.getToken(SolidityParser.Identifier, i);
    }
};


AssemblyIdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyIdentifierList(this);
	}
};

AssemblyIdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyIdentifierList(this);
	}
};




SolidityParser.AssemblyIdentifierListContext = AssemblyIdentifierListContext;

SolidityParser.prototype.assemblyIdentifierList = function() {

    var localctx = new AssemblyIdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SolidityParser.RULE_assemblyIdentifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 865;
        this.match(SolidityParser.Identifier);
        this.state = 870;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__12) {
            this.state = 866;
            this.match(SolidityParser.T__12);
            this.state = 867;
            this.match(SolidityParser.Identifier);
            this.state = 872;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyRightAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyRightAssignment;
    return this;
}

AssemblyRightAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyRightAssignmentContext.prototype.constructor = AssemblyRightAssignmentContext;

AssemblyRightAssignmentContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

AssemblyRightAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyRightAssignment(this);
	}
};

AssemblyRightAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyRightAssignment(this);
	}
};




SolidityParser.AssemblyRightAssignmentContext = AssemblyRightAssignmentContext;

SolidityParser.prototype.assemblyRightAssignment = function() {

    var localctx = new AssemblyRightAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SolidityParser.RULE_assemblyRightAssignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 873;
        this.match(SolidityParser.T__88);
        this.state = 874;
        this.match(SolidityParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_labelDefinition;
    return this;
}

LabelDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelDefinitionContext.prototype.constructor = LabelDefinitionContext;

LabelDefinitionContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

LabelDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterLabelDefinition(this);
	}
};

LabelDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitLabelDefinition(this);
	}
};




SolidityParser.LabelDefinitionContext = LabelDefinitionContext;

SolidityParser.prototype.labelDefinition = function() {

    var localctx = new LabelDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, SolidityParser.RULE_labelDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this.match(SolidityParser.Identifier);
        this.state = 877;
        this.match(SolidityParser.T__72);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyFunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyFunctionDefinition;
    return this;
}

AssemblyFunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyFunctionDefinitionContext.prototype.constructor = AssemblyFunctionDefinitionContext;

AssemblyFunctionDefinitionContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

AssemblyFunctionDefinitionContext.prototype.assemblyBlock = function() {
    return this.getTypedRuleContext(AssemblyBlockContext,0);
};

AssemblyFunctionDefinitionContext.prototype.assemblyIdentifierList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssemblyIdentifierListContext);
    } else {
        return this.getTypedRuleContext(AssemblyIdentifierListContext,i);
    }
};

AssemblyFunctionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyFunctionDefinition(this);
	}
};

AssemblyFunctionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyFunctionDefinition(this);
	}
};




SolidityParser.AssemblyFunctionDefinitionContext = AssemblyFunctionDefinitionContext;

SolidityParser.prototype.assemblyFunctionDefinition = function() {

    var localctx = new AssemblyFunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, SolidityParser.RULE_assemblyFunctionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 879;
        this.match(SolidityParser.T__25);
        this.state = 880;
        this.match(SolidityParser.Identifier);
        this.state = 881;
        this.match(SolidityParser.T__18);
        this.state = 883;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Identifier) {
            this.state = 882;
            this.assemblyIdentifierList();
        }

        this.state = 885;
        this.match(SolidityParser.T__19);
        this.state = 888;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__89) {
            this.state = 886;
            this.match(SolidityParser.T__89);
            this.state = 887;
            this.assemblyIdentifierList();
        }

        this.state = 890;
        this.assemblyBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyCaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyCase;
    return this;
}

AssemblyCaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyCaseContext.prototype.constructor = AssemblyCaseContext;

AssemblyCaseContext.prototype.assemblyLiteral = function() {
    return this.getTypedRuleContext(AssemblyLiteralContext,0);
};

AssemblyCaseContext.prototype.assemblyBlock = function() {
    return this.getTypedRuleContext(AssemblyBlockContext,0);
};

AssemblyCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyCase(this);
	}
};

AssemblyCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyCase(this);
	}
};




SolidityParser.AssemblyCaseContext = AssemblyCaseContext;

SolidityParser.prototype.assemblyCase = function() {

    var localctx = new AssemblyCaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, SolidityParser.RULE_assemblyCase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 892;
        this.match(SolidityParser.T__90);
        this.state = 893;
        this.assemblyLiteral();
        this.state = 894;
        this.match(SolidityParser.T__72);
        this.state = 895;
        this.assemblyBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyForContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyFor;
    return this;
}

AssemblyForContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyForContext.prototype.constructor = AssemblyForContext;

AssemblyForContext.prototype.assemblyExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssemblyExpressionContext);
    } else {
        return this.getTypedRuleContext(AssemblyExpressionContext,i);
    }
};

AssemblyForContext.prototype.assemblyBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssemblyBlockContext);
    } else {
        return this.getTypedRuleContext(AssemblyBlockContext,i);
    }
};

AssemblyForContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyFor(this);
	}
};

AssemblyForContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyFor(this);
	}
};




SolidityParser.AssemblyForContext = AssemblyForContext;

SolidityParser.prototype.assemblyFor = function() {

    var localctx = new AssemblyForContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, SolidityParser.RULE_assemblyFor);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 897;
        this.match(SolidityParser.T__22);
        this.state = 900;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__11:
            this.state = 898;
            this.assemblyBlock();
            break;
        case SolidityParser.T__37:
        case SolidityParser.T__38:
        case SolidityParser.T__39:
        case SolidityParser.T__40:
        case SolidityParser.T__48:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.StringLiteral:
        case SolidityParser.Identifier:
            this.state = 899;
            this.assemblyExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 902;
        this.assemblyExpression();
        this.state = 905;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__11:
            this.state = 903;
            this.assemblyBlock();
            break;
        case SolidityParser.T__37:
        case SolidityParser.T__38:
        case SolidityParser.T__39:
        case SolidityParser.T__40:
        case SolidityParser.T__48:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.StringLiteral:
        case SolidityParser.Identifier:
            this.state = 904;
            this.assemblyExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 907;
        this.assemblyBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblySwitchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblySwitch;
    return this;
}

AssemblySwitchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblySwitchContext.prototype.constructor = AssemblySwitchContext;

AssemblySwitchContext.prototype.assemblyExpression = function() {
    return this.getTypedRuleContext(AssemblyExpressionContext,0);
};

AssemblySwitchContext.prototype.assemblyCase = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssemblyCaseContext);
    } else {
        return this.getTypedRuleContext(AssemblyCaseContext,i);
    }
};

AssemblySwitchContext.prototype.assemblyBlock = function() {
    return this.getTypedRuleContext(AssemblyBlockContext,0);
};

AssemblySwitchContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblySwitch(this);
	}
};

AssemblySwitchContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblySwitch(this);
	}
};




SolidityParser.AssemblySwitchContext = AssemblySwitchContext;

SolidityParser.prototype.assemblySwitch = function() {

    var localctx = new AssemblySwitchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, SolidityParser.RULE_assemblySwitch);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 909;
        this.match(SolidityParser.T__91);
        this.state = 910;
        this.assemblyExpression();
        this.state = 914;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__90) {
            this.state = 911;
            this.assemblyCase();
            this.state = 916;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 920;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__92) {
            this.state = 917;
            this.match(SolidityParser.T__92);
            this.state = 918;
            this.match(SolidityParser.T__72);
            this.state = 919;
            this.assemblyBlock();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyLiteral;
    return this;
}

AssemblyLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyLiteralContext.prototype.constructor = AssemblyLiteralContext;

AssemblyLiteralContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

AssemblyLiteralContext.prototype.DecimalNumber = function() {
    return this.getToken(SolidityParser.DecimalNumber, 0);
};

AssemblyLiteralContext.prototype.HexNumber = function() {
    return this.getToken(SolidityParser.HexNumber, 0);
};

AssemblyLiteralContext.prototype.HexLiteral = function() {
    return this.getToken(SolidityParser.HexLiteral, 0);
};

AssemblyLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyLiteral(this);
	}
};

AssemblyLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyLiteral(this);
	}
};




SolidityParser.AssemblyLiteralContext = AssemblyLiteralContext;

SolidityParser.prototype.assemblyLiteral = function() {

    var localctx = new AssemblyLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SolidityParser.RULE_assemblyLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 922;
        _la = this._input.LA(1);
        if(!(((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (SolidityParser.DecimalNumber - 103)) | (1 << (SolidityParser.HexNumber - 103)) | (1 << (SolidityParser.HexLiteral - 103)) | (1 << (SolidityParser.StringLiteral - 103)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubAssemblyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_subAssembly;
    return this;
}

SubAssemblyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubAssemblyContext.prototype.constructor = SubAssemblyContext;

SubAssemblyContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

SubAssemblyContext.prototype.assemblyBlock = function() {
    return this.getTypedRuleContext(AssemblyBlockContext,0);
};

SubAssemblyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterSubAssembly(this);
	}
};

SubAssemblyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitSubAssembly(this);
	}
};




SolidityParser.SubAssemblyContext = SubAssemblyContext;

SolidityParser.prototype.subAssembly = function() {

    var localctx = new SubAssemblyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SolidityParser.RULE_subAssembly);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 924;
        this.match(SolidityParser.T__83);
        this.state = 925;
        this.match(SolidityParser.Identifier);
        this.state = 926;
        this.assemblyBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataSizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_dataSize;
    return this;
}

DataSizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataSizeContext.prototype.constructor = DataSizeContext;

DataSizeContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

DataSizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterDataSize(this);
	}
};

DataSizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitDataSize(this);
	}
};




SolidityParser.DataSizeContext = DataSizeContext;

SolidityParser.prototype.dataSize = function() {

    var localctx = new DataSizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SolidityParser.RULE_dataSize);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 928;
        this.match(SolidityParser.T__93);
        this.state = 929;
        this.match(SolidityParser.T__18);
        this.state = 930;
        this.match(SolidityParser.StringLiteral);
        this.state = 931;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LinkerSymbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_linkerSymbol;
    return this;
}

LinkerSymbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LinkerSymbolContext.prototype.constructor = LinkerSymbolContext;

LinkerSymbolContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

LinkerSymbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterLinkerSymbol(this);
	}
};

LinkerSymbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitLinkerSymbol(this);
	}
};




SolidityParser.LinkerSymbolContext = LinkerSymbolContext;

SolidityParser.prototype.linkerSymbol = function() {

    var localctx = new LinkerSymbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, SolidityParser.RULE_linkerSymbol);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 933;
        this.match(SolidityParser.T__94);
        this.state = 934;
        this.match(SolidityParser.T__18);
        this.state = 935;
        this.match(SolidityParser.StringLiteral);
        this.state = 936;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_numberLiteral;
    return this;
}

NumberLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberLiteralContext.prototype.constructor = NumberLiteralContext;

NumberLiteralContext.prototype.DecimalNumber = function() {
    return this.getToken(SolidityParser.DecimalNumber, 0);
};

NumberLiteralContext.prototype.HexNumber = function() {
    return this.getToken(SolidityParser.HexNumber, 0);
};

NumberLiteralContext.prototype.NumberUnit = function() {
    return this.getToken(SolidityParser.NumberUnit, 0);
};

NumberLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterNumberLiteral(this);
	}
};

NumberLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitNumberLiteral(this);
	}
};




SolidityParser.NumberLiteralContext = NumberLiteralContext;

SolidityParser.prototype.numberLiteral = function() {

    var localctx = new NumberLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, SolidityParser.RULE_numberLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 938;
        _la = this._input.LA(1);
        if(!(_la===SolidityParser.DecimalNumber || _la===SolidityParser.HexNumber)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 940;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
        if(la_===1) {
            this.state = 939;
            this.match(SolidityParser.NumberUnit);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitIdentifier(this);
	}
};




SolidityParser.IdentifierContext = IdentifierContext;

SolidityParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, SolidityParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 942;
        _la = this._input.LA(1);
        if(!(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


SolidityParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 33:
			return this.typeName_sempred(localctx, predIndex);
	case 54:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

SolidityParser.prototype.typeName_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SolidityParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 21);
		case 2:
			return this.precpred(this._ctx, 14);
		case 3:
			return this.precpred(this._ctx, 13);
		case 4:
			return this.precpred(this._ctx, 12);
		case 5:
			return this.precpred(this._ctx, 11);
		case 6:
			return this.precpred(this._ctx, 10);
		case 7:
			return this.precpred(this._ctx, 9);
		case 8:
			return this.precpred(this._ctx, 8);
		case 9:
			return this.precpred(this._ctx, 7);
		case 10:
			return this.precpred(this._ctx, 6);
		case 11:
			return this.precpred(this._ctx, 5);
		case 12:
			return this.precpred(this._ctx, 4);
		case 13:
			return this.precpred(this._ctx, 3);
		case 14:
			return this.precpred(this._ctx, 2);
		case 15:
			return this.precpred(this._ctx, 26);
		case 16:
			return this.precpred(this._ctx, 24);
		case 17:
			return this.precpred(this._ctx, 22);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.SolidityParser = SolidityParser;
